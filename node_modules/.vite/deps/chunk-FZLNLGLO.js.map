{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/dom-utils.js", "../../@vaadin/component-base/src/slot-observer.js", "../../@vaadin/component-base/src/unique-id-utils.js", "../../@vaadin/component-base/src/slot-controller.js", "../../@vaadin/component-base/src/tooltip-controller.js", "../../@vaadin/a11y-base/src/keyboard-mixin.js", "../../@vaadin/a11y-base/src/focus-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * Returns an array of ancestor root nodes for the given node.\n *\n * A root node is either a document node or a document fragment node (Shadow Root).\n * The array is collected by a bottom-up DOM traversing that starts with the given node\n * and involves both the light DOM and ancestor shadow DOM trees.\n *\n * @param {Node} node\n * @return {Node[]}\n */\nexport function getAncestorRootNodes(node) {\n  const result = [];\n\n  while (node) {\n    if (node.nodeType === Node.DOCUMENT_NODE) {\n      result.push(node);\n      break;\n    }\n\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      result.push(node);\n      node = node.host;\n      continue;\n    }\n\n    if (node.assignedSlot) {\n      node = node.assignedSlot;\n      continue;\n    }\n\n    node = node.parentNode;\n  }\n\n  return result;\n}\n\n/**\n * Returns the list of flattened elements for the given `node`.\n * This list consists of a node's children and, for any children that are\n * `<slot>` elements, the expanded flattened list of `assignedElements`.\n *\n * @param {Node} node\n * @return {Element[]}\n */\nexport function getFlattenedElements(node) {\n  const result = [];\n  let elements;\n  if (node.localName === 'slot') {\n    elements = node.assignedElements();\n  } else {\n    result.push(node);\n    elements = [...node.children];\n  }\n  elements.forEach((elem) => result.push(...getFlattenedElements(elem)));\n  return result;\n}\n\n/**\n * Traverses the given node and its parents, including those that are across\n * the shadow root boundaries, until it finds a node that matches the selector.\n *\n * @param {string} selector The CSS selector to match against\n * @param {Node} node The starting node for the traversal\n * @return {Node | null} The closest matching element, or null if no match is found\n */\nexport function getClosestElement(selector, node) {\n  if (!node) {\n    return null;\n  }\n\n  return node.closest(selector) || getClosestElement(selector, node.getRootNode().host);\n}\n\n/**\n * Takes a string with values separated by space and returns a set the values\n *\n * @param {string} value\n * @return {Set<string>}\n */\nexport function deserializeAttributeValue(value) {\n  if (!value) {\n    return new Set();\n  }\n\n  return new Set(value.split(' '));\n}\n\n/**\n * Takes a set of string values and returns a string with values separated by space\n *\n * @param {Set<string>} values\n * @return {string}\n */\nexport function serializeAttributeValue(values) {\n  return values ? [...values].join(' ') : '';\n}\n\n/**\n * Adds a value to an attribute containing space-delimited values.\n *\n * @param {HTMLElement} element\n * @param {string} attr\n * @param {string} value\n */\nexport function addValueToAttribute(element, attr, value) {\n  const values = deserializeAttributeValue(element.getAttribute(attr));\n  values.add(value);\n  element.setAttribute(attr, serializeAttributeValue(values));\n}\n\n/**\n * Removes a value from an attribute containing space-delimited values.\n * If the value is the last one, the whole attribute is removed.\n *\n * @param {HTMLElement} element\n * @param {string} attr\n * @param {string} value\n */\nexport function removeValueFromAttribute(element, attr, value) {\n  const values = deserializeAttributeValue(element.getAttribute(attr));\n  values.delete(value);\n  if (values.size === 0) {\n    element.removeAttribute(attr);\n    return;\n  }\n  element.setAttribute(attr, serializeAttributeValue(values));\n}\n\n/**\n * Returns true if the given node is an empty text node, false otherwise.\n *\n * @param {Node} node\n * @return {boolean}\n */\nexport function isEmptyTextNode(node) {\n  return node.nodeType === Node.TEXT_NODE && node.textContent.trim() === '';\n}\n", "/**\n * @license\n * Copyright (c) 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A helper for observing slot changes.\n */\nexport class SlotObserver {\n  constructor(slot, callback) {\n    /** @type HTMLSlotElement */\n    this.slot = slot;\n\n    /** @type Function */\n    this.callback = callback;\n\n    /** @type {Node[]} */\n    this._storedNodes = [];\n\n    this._connected = false;\n    this._scheduled = false;\n\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `SlotObserver` is created. It should only be called to  re-activate\n   * an observer that has been deactivated via the `disconnect` method.\n   */\n  connect() {\n    this.slot.addEventListener('slotchange', this._boundSchedule);\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the observer. After calling this method the observer callback\n   * will not be called when changes to slotted nodes occur. The `connect` method\n   * may be subsequently called to reactivate the observer.\n   */\n  disconnect() {\n    this.slot.removeEventListener('slotchange', this._boundSchedule);\n    this._connected = false;\n  }\n\n  /** @private */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n\n      queueMicrotask(() => {\n        this.flush();\n      });\n    }\n  }\n\n  /**\n   * Run the observer callback synchronously.\n   */\n  flush() {\n    if (!this._connected) {\n      return;\n    }\n\n    this._scheduled = false;\n\n    this._processNodes();\n  }\n\n  /** @private */\n  _processNodes() {\n    const currentNodes = this.slot.assignedNodes({ flatten: true });\n\n    let addedNodes = [];\n    const removedNodes = [];\n    const movedNodes = [];\n\n    if (currentNodes.length) {\n      addedNodes = currentNodes.filter((node) => !this._storedNodes.includes(node));\n    }\n\n    if (this._storedNodes.length) {\n      this._storedNodes.forEach((node, index) => {\n        const idx = currentNodes.indexOf(node);\n        if (idx === -1) {\n          removedNodes.push(node);\n        } else if (idx !== index) {\n          movedNodes.push(node);\n        }\n      });\n    }\n\n    if (addedNodes.length || removedNodes.length || movedNodes.length) {\n      this.callback({ addedNodes, movedNodes, removedNodes });\n    }\n\n    this._storedNodes = currentNodes;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\nlet uniqueId = 0;\n\n/**\n * Resets the unique id counter.\n *\n * @return {void}\n */\nexport function resetUniqueId() {\n  uniqueId = 0;\n}\n\n/**\n * Returns a unique integer id.\n *\n * @return {number}\n */\nexport function generateUniqueId() {\n  // eslint-disable-next-line no-plusplus\n  return uniqueId++;\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isEmptyTextNode } from './dom-utils.js';\nimport { SlotObserver } from './slot-observer.js';\nimport { generateUniqueId } from './unique-id-utils.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController extends EventTarget {\n  /**\n   * Ensure that every instance has unique ID.\n   *\n   * @param {HTMLElement} host\n   * @param {string} slotName\n   * @return {string}\n   * @protected\n   */\n  static generateId(host, slotName) {\n    const prefix = slotName || 'default';\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\n  }\n\n  constructor(host, slotName, tagName, config = {}) {\n    super();\n\n    const { initializer, multiple, observe, useUniqueId } = config;\n\n    this.host = host;\n    this.slotName = slotName;\n    this.tagName = tagName;\n    this.observe = typeof observe === 'boolean' ? observe : true;\n    this.multiple = typeof multiple === 'boolean' ? multiple : false;\n    this.slotInitializer = initializer;\n\n    if (multiple) {\n      this.nodes = [];\n    }\n\n    // Only generate the default ID if requested by the controller.\n    if (useUniqueId) {\n      this.defaultId = this.constructor.generateId(host, slotName);\n    }\n  }\n\n  hostConnected() {\n    if (!this.initialized) {\n      if (this.multiple) {\n        this.initMultiple();\n      } else {\n        this.initSingle();\n      }\n\n      if (this.observe) {\n        this.observeSlot();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  /** @protected */\n  initSingle() {\n    let node = this.getSlotChild();\n\n    if (!node) {\n      node = this.attachDefaultNode();\n      this.initNode(node);\n    } else {\n      this.node = node;\n      this.initAddedNode(node);\n    }\n  }\n\n  /** @protected */\n  initMultiple() {\n    const children = this.getSlotChildren();\n\n    if (children.length === 0) {\n      const defaultNode = this.attachDefaultNode();\n      if (defaultNode) {\n        this.nodes = [defaultNode];\n        this.initNode(defaultNode);\n      }\n    } else {\n      this.nodes = children;\n      children.forEach((node) => {\n        this.initAddedNode(node);\n      });\n    }\n  }\n\n  /**\n   * Create and attach default node using the provided tag name, if any.\n   * @return {Node | undefined}\n   * @protected\n   */\n  attachDefaultNode() {\n    const { host, slotName, tagName } = this;\n\n    // Check if the node was created previously and if so, reuse it.\n    let node = this.defaultNode;\n\n    // Tag name is optional, sometimes we don't init default content.\n    if (!node && tagName) {\n      node = document.createElement(tagName);\n      if (node instanceof Element) {\n        if (slotName !== '') {\n          node.setAttribute('slot', slotName);\n        }\n        this.node = node;\n        this.defaultNode = node;\n      }\n    }\n\n    if (node) {\n      host.appendChild(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Return the list of nodes matching the slot managed by the controller.\n   * @return {Node}\n   */\n  getSlotChildren() {\n    const { slotName } = this;\n    return Array.from(this.host.childNodes).filter((node) => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return (\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\n      );\n    });\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    return this.getSlotChildren()[0];\n  }\n\n  /**\n   * Run `slotInitializer` for the node managed by the controller.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initNode(node) {\n    const { slotInitializer } = this;\n    // Don't try to bind `this` to initializer (normally it's arrow function).\n    // Instead, pass the host as a first argument to access component's state.\n    if (slotInitializer) {\n      slotInitializer(node, this.host);\n    }\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Run both `initCustomNode` and `initNode` for a custom slotted node.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initAddedNode(node) {\n    if (node !== this.defaultNode) {\n      this.initCustomNode(node);\n      this.initNode(node);\n    }\n  }\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observeSlot() {\n    const { slotName } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n\n    this.__slotObserver = new SlotObserver(slot, ({ addedNodes, removedNodes }) => {\n      const current = this.multiple ? this.nodes : [this.node];\n\n      // Calling `slot.assignedNodes()` includes whitespace text nodes in case of default slot:\n      // unlike comment nodes, they are not filtered out. So we need to manually ignore them.\n      const newNodes = addedNodes.filter((node) => !isEmptyTextNode(node) && !current.includes(node));\n\n      if (removedNodes.length) {\n        this.nodes = current.filter((node) => !removedNodes.includes(node));\n\n        removedNodes.forEach((node) => {\n          this.teardownNode(node);\n        });\n      }\n\n      if (newNodes && newNodes.length > 0) {\n        if (this.multiple) {\n          // Remove default node if exists\n          if (this.defaultNode) {\n            this.defaultNode.remove();\n          }\n          this.nodes = [...current, ...newNodes].filter((node) => node !== this.defaultNode);\n          newNodes.forEach((node) => {\n            this.initAddedNode(node);\n          });\n        } else {\n          // Remove previous node if exists\n          if (this.node) {\n            this.node.remove();\n          }\n          this.node = newNodes[0];\n          this.initAddedNode(this.node);\n        }\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2022 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from './slot-controller.js';\n\n/**\n * A controller that manages the slotted tooltip element.\n */\nexport class TooltipController extends SlotController {\n  constructor(host) {\n    // Do not provide slot factory to create tooltip lazily.\n    super(host, 'tooltip');\n\n    this.setTarget(host);\n  }\n\n  /**\n   * Override to initialize the newly added custom tooltip.\n   *\n   * @param {Node} tooltipNode\n   * @protected\n   * @override\n   */\n  initCustomNode(tooltipNode) {\n    tooltipNode.target = this.target;\n\n    if (this.ariaTarget !== undefined) {\n      tooltipNode.ariaTarget = this.ariaTarget;\n    }\n\n    if (this.context !== undefined) {\n      tooltipNode.context = this.context;\n    }\n\n    if (this.manual !== undefined) {\n      tooltipNode.manual = this.manual;\n    }\n\n    if (this.opened !== undefined) {\n      tooltipNode.opened = this.opened;\n    }\n\n    if (this.position !== undefined) {\n      tooltipNode._position = this.position;\n    }\n\n    if (this.shouldShow !== undefined) {\n      tooltipNode.shouldShow = this.shouldShow;\n    }\n\n    this.__notifyChange();\n  }\n\n  /**\n   * Override to notify the host when the tooltip is removed.\n   *\n   * @param {Node} tooltipNode\n   * @protected\n   * @override\n   */\n  teardownNode() {\n    this.__notifyChange();\n  }\n\n  /**\n   * Set an HTML element for linking with the tooltip overlay\n   * via `aria-describedby` attribute used by screen readers.\n   * @param {HTMLElement} ariaTarget\n   */\n  setAriaTarget(ariaTarget) {\n    this.ariaTarget = ariaTarget;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.ariaTarget = ariaTarget;\n    }\n  }\n\n  /**\n   * Set a context object to be used by generator.\n   * @param {object} context\n   */\n  setContext(context) {\n    this.context = context;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.context = context;\n    }\n  }\n\n  /**\n   * Toggle manual state on the slotted tooltip.\n   * @param {boolean} manual\n   */\n  setManual(manual) {\n    this.manual = manual;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.manual = manual;\n    }\n  }\n\n  /**\n   * Toggle opened state on the slotted tooltip.\n   * @param {boolean} opened\n   */\n  setOpened(opened) {\n    this.opened = opened;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.opened = opened;\n    }\n  }\n\n  /**\n   * Set default position for the slotted tooltip.\n   * This can be overridden by setting the position\n   * using corresponding property or attribute.\n   * @param {string} position\n   */\n  setPosition(position) {\n    this.position = position;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode._position = position;\n    }\n  }\n\n  /**\n   * Set function used to detect whether to show\n   * the tooltip based on a condition.\n   * @param {Function} shouldShow\n   */\n  setShouldShow(shouldShow) {\n    this.shouldShow = shouldShow;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.shouldShow = shouldShow;\n    }\n  }\n\n  /**\n   * Set an HTML element to attach the tooltip to.\n   * @param {HTMLElement} target\n   */\n  setTarget(target) {\n    this.target = target;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.target = target;\n    }\n  }\n\n  /** @private */\n  __notifyChange() {\n    this.dispatchEvent(new CustomEvent('tooltip-changed', { detail: { node: this.node } }));\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin that manages keyboard handling.\n * The mixin subscribes to the keyboard events while an actual implementation\n * for the event handlers is left to the client (a component or another mixin).\n *\n * @polymerMixin\n */\nexport const KeyboardMixin = dedupingMixin(\n  (superclass) =>\n    class KeyboardMixinClass extends superclass {\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this.addEventListener('keydown', (event) => {\n          this._onKeyDown(event);\n        });\n\n        this.addEventListener('keyup', (event) => {\n          this._onKeyUp(event);\n        });\n      }\n\n      /**\n       * A handler for the `keydown` event. By default, it calls\n       * separate methods for handling \"Enter\" and \"Escape\" keys.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} event\n       * @protected\n       */\n      _onKeyDown(event) {\n        switch (event.key) {\n          case 'Enter':\n            this._onEnter(event);\n            break;\n          case 'Escape':\n            this._onEscape(event);\n            break;\n          default:\n            break;\n        }\n      }\n\n      /**\n       * A handler for the `keyup` event. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onKeyUp(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Enter\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEnter(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Escape\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEscape(_event) {\n        // To be implemented.\n      }\n    },\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { isKeyboardActive } from './focus-utils.js';\n\n/**\n * A mixin to handle `focused` and `focus-ring` attributes based on focus.\n *\n * @polymerMixin\n */\nexport const FocusMixin = dedupingMixin(\n  (superclass) =>\n    class FocusMixinClass extends superclass {\n      /**\n       * @protected\n       * @return {boolean}\n       */\n      get _keyboardActive() {\n        return isKeyboardActive();\n      }\n\n      /** @protected */\n      ready() {\n        this.addEventListener('focusin', (e) => {\n          if (this._shouldSetFocus(e)) {\n            this._setFocused(true);\n          }\n        });\n\n        this.addEventListener('focusout', (e) => {\n          if (this._shouldRemoveFocus(e)) {\n            this._setFocused(false);\n          }\n        });\n\n        // In super.ready() other 'focusin' and 'focusout' listeners might be\n        // added, so we call it after our own ones to ensure they execute first.\n        // Issue to watch out: when incorrect, <vaadin-combo-box> refocuses the\n        // input field on iOS after \"Done\" is pressed.\n        super.ready();\n      }\n\n      /** @protected */\n      disconnectedCallback() {\n        super.disconnectedCallback();\n\n        // In non-Chrome browsers, blur does not fire on the element when it is disconnected.\n        // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n        if (this.hasAttribute('focused')) {\n          this._setFocused(false);\n        }\n      }\n\n      /**\n       * Override to change how focused and focus-ring attributes are set.\n       *\n       * @param {boolean} focused\n       * @protected\n       */\n      _setFocused(focused) {\n        this.toggleAttribute('focused', focused);\n\n        // Focus-ring is true when the element was focused from the keyboard.\n        // Focus Ring [A11ycasts]: https://youtu.be/ilj2P5-5CjI\n        this.toggleAttribute('focus-ring', focused && this._keyboardActive);\n      }\n\n      /**\n       * Override to define if the field receives focus based on the event.\n       *\n       * @param {FocusEvent} _event\n       * @return {boolean}\n       * @protected\n       */\n      _shouldSetFocus(_event) {\n        return true;\n      }\n\n      /**\n       * Override to define if the field loses focus based on the event.\n       *\n       * @param {FocusEvent} _event\n       * @return {boolean}\n       * @protected\n       */\n      _shouldRemoveFocus(_event) {\n        return true;\n      }\n    },\n);\n"],
  "mappings": "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",
  "names": []
}
