{
  "version": 3,
  "sources": ["src/Plugin.ts"],
  "sourcesContent": ["import type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type { Logger } from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type { Constructor } from 'type-fest';\nimport type ReferenceResolver from './ReferenceResolver.js';\nimport type SharedStorage from './SharedStorage.js';\n\nexport default abstract class Plugin {\n  readonly resolver: ReferenceResolver;\n  readonly logger: Logger;\n\n  constructor(resolver: ReferenceResolver, logger: LoggerFactory) {\n    this.logger = logger.for(this.constructor.name);\n    this.resolver = resolver;\n  }\n\n  get name(): string {\n    return this.constructor.name;\n  }\n\n  abstract get path(): string;\n\n  abstract execute(storage: SharedStorage): Promise<void>;\n}\n\nexport type PluginConstructor = Constructor<Plugin, ConstructorParameters<typeof Plugin>>;\n"],
  "mappings": "AAMA,MAAOA,CAA8B,CAC1B,SACA,OAET,YAAYC,EAA6BC,EAAuB,CAC9D,KAAK,OAASA,EAAO,IAAI,KAAK,YAAY,IAAI,EAC9C,KAAK,SAAWD,CAClB,CAEA,IAAI,MAAe,CACjB,OAAO,KAAK,YAAY,IAC1B,CAKF",
  "names": ["Plugin", "resolver", "logger"]
}
