{
  "version": 3,
  "sources": ["src/PluginManager.ts"],
  "sourcesContent": ["import type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type Plugin from './Plugin.js';\nimport type { PluginConstructor } from './Plugin.js';\nimport type ReferenceResolver from './ReferenceResolver.js';\nimport type SharedStorage from './SharedStorage.js';\n\nexport default class PluginManager {\n  readonly #plugins: Plugin[];\n\n  constructor(plugins: readonly PluginConstructor[], resolver: ReferenceResolver, logger: LoggerFactory) {\n    const standardPlugins = [\n      'BackbonePlugin',\n      'ClientPlugin',\n      'BarrelPlugin',\n      'ModelPlugin',\n      'PushPlugin',\n      'SubTypesPlugin',\n    ];\n    const customPlugins = plugins.filter((p) => !standardPlugins.includes(p.name));\n    if (customPlugins.length > 0) {\n      logger.global.info(`Plugins: ${plugins.map(({ name }) => name).join(', ')}`);\n    }\n    this.#plugins = plugins.map((PluginClass) => new PluginClass(resolver, logger));\n  }\n\n  async execute(storage: SharedStorage): Promise<void> {\n    // We need to run plugins sequentially\n    for (const plugin of this.#plugins) {\n      const { name, path } = plugin;\n      plugin.logger.debug({ plugin: { name, path } }, `Executing plugin '${plugin.name}'`);\n      // eslint-disable-next-line no-await-in-loop\n      await plugin.execute(storage);\n    }\n  }\n}\n"],
  "mappings": "AAMA,MAAOA,CAA4B,CACxBC,GAET,YAAYC,EAAuCC,EAA6BC,EAAuB,CACrG,MAAMC,EAAkB,CACtB,iBACA,eACA,eACA,cACA,aACA,gBACF,EACsBH,EAAQ,OAAQI,GAAM,CAACD,EAAgB,SAASC,EAAE,IAAI,CAAC,EAC3D,OAAS,GACzBF,EAAO,OAAO,KAAK,YAAYF,EAAQ,IAAI,CAAC,CAAE,KAAAK,CAAK,IAAMA,CAAI,EAAE,KAAK,IAAI,CAAC,EAAE,EAE7E,KAAKN,GAAWC,EAAQ,IAAKM,GAAgB,IAAIA,EAAYL,EAAUC,CAAM,CAAC,CAChF,CAEA,MAAM,QAAQK,EAAuC,CAEnD,UAAWC,KAAU,KAAKT,GAAU,CAClC,KAAM,CAAE,KAAAM,EAAM,KAAAI,CAAK,EAAID,EACvBA,EAAO,OAAO,MAAM,CAAE,OAAQ,CAAE,KAAAH,EAAM,KAAAI,CAAK,CAAE,EAAG,qBAAqBD,EAAO,IAAI,GAAG,EAEnF,MAAMA,EAAO,QAAQD,CAAO,CAC9B,CACF,CACF",
  "names": ["PluginManager", "#plugins", "plugins", "resolver", "logger", "standardPlugins", "p", "name", "PluginClass", "storage", "plugin", "path"]
}
