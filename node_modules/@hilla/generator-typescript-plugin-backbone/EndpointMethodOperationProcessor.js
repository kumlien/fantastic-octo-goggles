import g from"@hilla/generator-typescript-plugin-client";import u from"fast-deep-equal";import{OpenAPIV3 as m}from"openapi-types";import e from"typescript";import P from"./EndpointMethodRequestBodyProcessor.js";import M from"./EndpointMethodResponseProcessor.js";const E="EndpointRequestInit",O="@hilla/frontend";class a{static createProcessor(r,n,t,o,i,s){switch(r){case m.HttpMethods.POST:return new T(n,t,o,i,s);default:s.logger.warn(`Processing ${r.toUpperCase()} currently is not supported`);return}}}class T extends a{#r;#e;#n;#o;#t;constructor(r,n,t,o,i){super(),this.#t=i,this.#r=o,this.#n=r,this.#e=n,this.#o=t}async process(r){const{exports:n,imports:t,paths:o}=this.#r;this.#t.logger.debug(`${this.#n}.${this.#e} - processing POST method`);const i=t.named.getIdentifier(o.createBareModulePath(O),E),{initParam:s,packedParameters:d,parameters:c}=new P(this.#o.requestBody,this.#r,this.#t,i).process(),y=n.named.add(this.#e),l=t.default.getIdentifier(o.createRelativePath(await g.getClientFileName(r))),f=e.factory.createCallExpression(e.factory.createPropertyAccessExpression(l,e.factory.createIdentifier("call")),void 0,[e.factory.createStringLiteral(this.#n),e.factory.createStringLiteral(this.#e),d,s].filter(Boolean)),h=this.#i();return e.factory.createFunctionDeclaration([e.factory.createToken(e.SyntaxKind.AsyncKeyword)],void 0,y,void 0,c,e.factory.createTypeReferenceNode("Promise",[h]),e.factory.createBlock([e.factory.createReturnStatement(f)]))}#i(){this.#t.logger.debug(`${this.#n}.${this.#e} POST - processing response type`);const r=Object.entries(this.#o.responses).flatMap(([n,t])=>new M(n,t,this.#r,this.#t).process()).filter((n,t,o)=>o.findIndex(i=>u(i,n))===t);return r.length===0?e.factory.createKeywordTypeNode(e.SyntaxKind.VoidKeyword):e.factory.createUnionTypeNode(r)}}export{O as HILLA_FRONTEND_NAME,E as INIT_TYPE_NAME,a as default};
//# sourceMappingURL=EndpointMethodOperationProcessor.js.map
