{
  "version": 3,
  "sources": ["src/EndpointMethodOperationProcessor.ts"],
  "sourcesContent": ["/* eslint-disable max-params */\nimport type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport ClientPlugin from '@hilla/generator-typescript-plugin-client';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport equal from 'fast-deep-equal';\nimport { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport ts, { type Expression, type Statement, type TypeNode } from 'typescript';\nimport EndpointMethodRequestBodyProcessor from './EndpointMethodRequestBodyProcessor.js';\nimport EndpointMethodResponseProcessor from './EndpointMethodResponseProcessor.js';\n\nexport type EndpointMethodOperation = ReadonlyDeep<OpenAPIV3.OperationObject>;\n\nexport const INIT_TYPE_NAME = 'EndpointRequestInit';\nexport const HILLA_FRONTEND_NAME = '@hilla/frontend';\n\nexport default abstract class EndpointMethodOperationProcessor {\n  static createProcessor(\n    httpMethod: OpenAPIV3.HttpMethods,\n    endpointName: string,\n    endpointMethodName: string,\n    operation: EndpointMethodOperation,\n    dependencies: DependencyManager,\n    owner: Plugin,\n  ): EndpointMethodOperationProcessor | undefined {\n    switch (httpMethod) {\n      case OpenAPIV3.HttpMethods.POST:\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new EndpointMethodOperationPOSTProcessor(\n          endpointName,\n          endpointMethodName,\n          operation,\n          dependencies,\n          owner,\n        );\n      default:\n        owner.logger.warn(`Processing ${httpMethod.toUpperCase()} currently is not supported`);\n        return undefined;\n    }\n  }\n\n  abstract process(outputDir?: string): Promise<Statement | undefined>;\n}\n\nclass EndpointMethodOperationPOSTProcessor extends EndpointMethodOperationProcessor {\n  readonly #dependencies: DependencyManager;\n  readonly #endpointMethodName: string;\n  readonly #endpointName: string;\n  readonly #operation: EndpointMethodOperation;\n  readonly #owner: Plugin;\n\n  constructor(\n    endpointName: string,\n    endpointMethodName: string,\n    operation: EndpointMethodOperation,\n    dependencies: DependencyManager,\n    owner: Plugin,\n  ) {\n    super();\n    this.#owner = owner;\n    this.#dependencies = dependencies;\n    this.#endpointName = endpointName;\n    this.#endpointMethodName = endpointMethodName;\n    this.#operation = operation;\n  }\n\n  async process(outputDir?: string): Promise<Statement | undefined> {\n    const { exports, imports, paths } = this.#dependencies;\n    this.#owner.logger.debug(`${this.#endpointName}.${this.#endpointMethodName} - processing POST method`);\n    const initTypeIdentifier = imports.named.getIdentifier(\n      paths.createBareModulePath(HILLA_FRONTEND_NAME),\n      INIT_TYPE_NAME,\n    )!;\n\n    const { initParam, packedParameters, parameters } = new EndpointMethodRequestBodyProcessor(\n      this.#operation.requestBody,\n      this.#dependencies,\n      this.#owner,\n      initTypeIdentifier,\n    ).process();\n\n    const methodIdentifier = exports.named.add(this.#endpointMethodName);\n    const clientLibIdentifier = imports.default.getIdentifier(\n      paths.createRelativePath(await ClientPlugin.getClientFileName(outputDir)),\n    )!;\n\n    const callExpression = ts.factory.createCallExpression(\n      ts.factory.createPropertyAccessExpression(clientLibIdentifier, ts.factory.createIdentifier('call')),\n      undefined,\n      [\n        ts.factory.createStringLiteral(this.#endpointName),\n        ts.factory.createStringLiteral(this.#endpointMethodName),\n        packedParameters,\n        initParam,\n      ].filter(Boolean) as readonly Expression[],\n    );\n\n    const responseType = this.#prepareResponseType();\n\n    return ts.factory.createFunctionDeclaration(\n      [ts.factory.createToken(ts.SyntaxKind.AsyncKeyword)],\n      undefined,\n      methodIdentifier,\n      undefined,\n      parameters,\n      ts.factory.createTypeReferenceNode('Promise', [responseType]),\n      ts.factory.createBlock([ts.factory.createReturnStatement(callExpression)]),\n    );\n  }\n\n  #prepareResponseType(): TypeNode {\n    this.#owner.logger.debug(`${this.#endpointName}.${this.#endpointMethodName} POST - processing response type`);\n\n    const responseTypes = Object.entries(this.#operation.responses)\n      .flatMap(([code, response]) =>\n        new EndpointMethodResponseProcessor(code, response, this.#dependencies, this.#owner).process(),\n      )\n      .filter((value, index, arr) => arr.findIndex((v) => equal(v, value)) === index);\n\n    if (responseTypes.length === 0) {\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword);\n    }\n\n    return ts.factory.createUnionTypeNode(responseTypes);\n  }\n}\n"],
  "mappings": "AAEA,OAAOA,MAAkB,4CAEzB,OAAOC,MAAW,kBAClB,OAAS,aAAAC,MAAiB,gBAE1B,OAAOC,MAA4D,aACnE,OAAOC,MAAwC,0CAC/C,OAAOC,MAAqC,uCAIrC,MAAMC,EAAiB,sBACjBC,EAAsB,kBAEnC,MAAOC,CAAwD,CAC7D,OAAO,gBACLC,EACAC,EACAC,EACAC,EACAC,EACAC,EAC8C,CAC9C,OAAQL,EAAY,CAClB,KAAKP,EAAU,YAAY,KAEzB,OAAO,IAAIa,EACTL,EACAC,EACAC,EACAC,EACAC,CACF,EACF,QACEA,EAAM,OAAO,KAAK,cAAcL,EAAW,YAAY,CAAC,6BAA6B,EACrF,MACJ,CACF,CAGF,CAEA,MAAMM,UAA6CP,CAAiC,CACzEQ,GACAC,GACAC,GACAC,GACAC,GAET,YACEV,EACAC,EACAC,EACAC,EACAC,EACA,CACA,MAAM,EACN,KAAKM,GAASN,EACd,KAAKE,GAAgBH,EACrB,KAAKK,GAAgBR,EACrB,KAAKO,GAAsBN,EAC3B,KAAKQ,GAAaP,CACpB,CAEA,MAAM,QAAQS,EAAoD,CAChE,KAAM,CAAE,QAAAC,EAAS,QAAAC,EAAS,MAAAC,CAAM,EAAI,KAAKR,GACzC,KAAKI,GAAO,OAAO,MAAM,GAAG,KAAKF,EAAa,IAAI,KAAKD,EAAmB,2BAA2B,EACrG,MAAMQ,EAAqBF,EAAQ,MAAM,cACvCC,EAAM,qBAAqBjB,CAAmB,EAC9CD,CACF,EAEM,CAAE,UAAAoB,EAAW,iBAAAC,EAAkB,WAAAC,CAAW,EAAI,IAAIxB,EACtD,KAAKe,GAAW,YAChB,KAAKH,GACL,KAAKI,GACLK,CACF,EAAE,QAAQ,EAEJI,EAAmBP,EAAQ,MAAM,IAAI,KAAKL,EAAmB,EAC7Da,EAAsBP,EAAQ,QAAQ,cAC1CC,EAAM,mBAAmB,MAAMxB,EAAa,kBAAkBqB,CAAS,CAAC,CAC1E,EAEMU,EAAiB5B,EAAG,QAAQ,qBAChCA,EAAG,QAAQ,+BAA+B2B,EAAqB3B,EAAG,QAAQ,iBAAiB,MAAM,CAAC,EAClG,OACA,CACEA,EAAG,QAAQ,oBAAoB,KAAKe,EAAa,EACjDf,EAAG,QAAQ,oBAAoB,KAAKc,EAAmB,EACvDU,EACAD,CACF,EAAE,OAAO,OAAO,CAClB,EAEMM,EAAe,KAAKC,GAAqB,EAE/C,OAAO9B,EAAG,QAAQ,0BAChB,CAACA,EAAG,QAAQ,YAAYA,EAAG,WAAW,YAAY,CAAC,EACnD,OACA0B,EACA,OACAD,EACAzB,EAAG,QAAQ,wBAAwB,UAAW,CAAC6B,CAAY,CAAC,EAC5D7B,EAAG,QAAQ,YAAY,CAACA,EAAG,QAAQ,sBAAsB4B,CAAc,CAAC,CAAC,CAC3E,CACF,CAEAE,IAAiC,CAC/B,KAAKb,GAAO,OAAO,MAAM,GAAG,KAAKF,EAAa,IAAI,KAAKD,EAAmB,kCAAkC,EAE5G,MAAMiB,EAAgB,OAAO,QAAQ,KAAKf,GAAW,SAAS,EAC3D,QAAQ,CAAC,CAACgB,EAAMC,CAAQ,IACvB,IAAI/B,EAAgC8B,EAAMC,EAAU,KAAKpB,GAAe,KAAKI,EAAM,EAAE,QAAQ,CAC/F,EACC,OAAO,CAACiB,EAAOC,EAAOC,IAAQA,EAAI,UAAWC,GAAMvC,EAAMuC,EAAGH,CAAK,CAAC,IAAMC,CAAK,EAEhF,OAAIJ,EAAc,SAAW,EACpB/B,EAAG,QAAQ,sBAAsBA,EAAG,WAAW,WAAW,EAG5DA,EAAG,QAAQ,oBAAoB+B,CAAa,CACrD,CACF",
  "names": ["ClientPlugin", "equal", "OpenAPIV3", "ts", "EndpointMethodRequestBodyProcessor", "EndpointMethodResponseProcessor", "INIT_TYPE_NAME", "HILLA_FRONTEND_NAME", "EndpointMethodOperationProcessor", "httpMethod", "endpointName", "endpointMethodName", "operation", "dependencies", "owner", "EndpointMethodOperationPOSTProcessor", "#dependencies", "#endpointMethodName", "#endpointName", "#operation", "#owner", "outputDir", "exports", "imports", "paths", "initTypeIdentifier", "initParam", "packedParameters", "parameters", "methodIdentifier", "clientLibIdentifier", "callExpression", "responseType", "#prepareResponseType", "responseTypes", "code", "response", "value", "index", "arr", "v"]
}
