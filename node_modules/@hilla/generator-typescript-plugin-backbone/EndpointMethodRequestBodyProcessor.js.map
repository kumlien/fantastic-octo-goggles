{
  "version": 3,
  "sources": ["src/EndpointMethodRequestBodyProcessor.ts"],
  "sourcesContent": ["import type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport {\n  isEmptyObject,\n  isObjectSchema,\n  type NonEmptyObjectSchema,\n  type Schema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport ts, { type ObjectLiteralExpression, type ParameterDeclaration } from 'typescript';\nimport TypeSchemaProcessor from './TypeSchemaProcessor.js';\nimport { defaultMediaType } from './utils.js';\n\nexport type EndpointMethodRequestBody = ReadonlyDeep<OpenAPIV3.RequestBodyObject>;\n\nexport type EndpointMethodRequestBodyProcessingResult = Readonly<{\n  parameters: readonly ParameterDeclaration[];\n  packedParameters?: ObjectLiteralExpression;\n  initParam: ts.Identifier;\n}>;\n\nexport default class EndpointMethodRequestBodyProcessor {\n  static readonly #defaultInitParamName = 'init';\n\n  readonly #dependencies: DependencyManager;\n  readonly #owner: Plugin;\n  readonly #requestBody?: EndpointMethodRequestBody;\n  readonly #initTypeIdentifier: ts.Identifier;\n\n  constructor(\n    requestBody: ReadonlyDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.RequestBodyObject> | undefined,\n    dependencies: DependencyManager,\n    owner: Plugin,\n    initTypeIdentifier: ts.Identifier,\n  ) {\n    this.#owner = owner;\n    this.#dependencies = dependencies;\n    this.#requestBody = requestBody ? owner.resolver.resolve(requestBody) : undefined;\n    this.#initTypeIdentifier = initTypeIdentifier;\n  }\n\n  process(): EndpointMethodRequestBodyProcessingResult {\n    if (!this.#requestBody) {\n      return {\n        initParam: ts.factory.createIdentifier(EndpointMethodRequestBodyProcessor.#defaultInitParamName),\n        packedParameters: ts.factory.createObjectLiteralExpression(),\n        parameters: [\n          ts.factory.createParameterDeclaration(\n            undefined,\n            undefined,\n            EndpointMethodRequestBodyProcessor.#defaultInitParamName,\n            ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n            ts.factory.createTypeReferenceNode(this.#initTypeIdentifier),\n          ),\n        ],\n      };\n    }\n\n    const parameterData = this.#extractParameterData(this.#requestBody.content[defaultMediaType].schema);\n    const parameterNames = parameterData.map(([name]) => name);\n    let initParamName = EndpointMethodRequestBodyProcessor.#defaultInitParamName;\n\n    while (parameterNames.includes(initParamName)) {\n      initParamName = `_${initParamName}`;\n    }\n\n    return {\n      initParam: ts.factory.createIdentifier(initParamName),\n      packedParameters: ts.factory.createObjectLiteralExpression(\n        parameterData.map(([name]) => ts.factory.createShorthandPropertyAssignment(name)),\n      ),\n      parameters: [\n        ...parameterData.map(([name, schema]) => {\n          const nodes = new TypeSchemaProcessor(schema, this.#dependencies).process();\n\n          return ts.factory.createParameterDeclaration(\n            undefined,\n            undefined,\n            name,\n            undefined,\n            ts.factory.createUnionTypeNode(nodes),\n          );\n        }),\n        ts.factory.createParameterDeclaration(\n          undefined,\n          undefined,\n          initParamName,\n          ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n          ts.factory.createTypeReferenceNode(this.#initTypeIdentifier),\n        ),\n      ],\n    };\n  }\n\n  #extractParameterData(\n    basicSchema?: ReadonlyDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject>,\n  ): Array<readonly [string, Schema]> {\n    if (!basicSchema) {\n      return [];\n    }\n\n    const { logger, resolver } = this.#owner;\n\n    const resolvedSchema = resolver.resolve(basicSchema);\n\n    if (isObjectSchema(resolvedSchema) && !isEmptyObject(resolvedSchema)) {\n      return Object.entries((resolvedSchema as NonEmptyObjectSchema).properties);\n    }\n\n    logger.warn(\"A schema provided for endpoint method's 'requestBody' is not supported\");\n    return [];\n  }\n}\n"],
  "mappings": "AACA,OACE,iBAAAA,EACA,kBAAAC,MAGK,6CAIP,OAAOC,MAAqE,aAC5E,OAAOC,MAAyB,2BAChC,OAAS,oBAAAC,MAAwB,aAUjC,MAAOC,CAAiD,CACtD,MAAgBC,GAAwB,OAE/BC,GACAC,GACAC,GACAC,GAET,YACEC,EACAC,EACAC,EACAC,EACA,CACA,KAAKN,GAASK,EACd,KAAKN,GAAgBK,EACrB,KAAKH,GAAeE,EAAcE,EAAM,SAAS,QAAQF,CAAW,EAAI,OACxE,KAAKD,GAAsBI,CAC7B,CAEA,SAAqD,CACnD,GAAI,CAAC,KAAKL,GACR,MAAO,CACL,UAAWP,EAAG,QAAQ,iBAAiBG,EAAmCC,EAAqB,EAC/F,iBAAkBJ,EAAG,QAAQ,8BAA8B,EAC3D,WAAY,CACVA,EAAG,QAAQ,2BACT,OACA,OACAG,EAAmCC,GACnCJ,EAAG,QAAQ,YAAYA,EAAG,WAAW,aAAa,EAClDA,EAAG,QAAQ,wBAAwB,KAAKQ,EAAmB,CAC7D,CACF,CACF,EAGF,MAAMK,EAAgB,KAAKC,GAAsB,KAAKP,GAAa,QAAQL,CAAgB,EAAE,MAAM,EAC7Fa,EAAiBF,EAAc,IAAI,CAAC,CAACG,CAAI,IAAMA,CAAI,EACzD,IAAIC,EAAgBd,EAAmCC,GAEvD,KAAOW,EAAe,SAASE,CAAa,GAC1CA,EAAgB,IAAIA,CAAa,GAGnC,MAAO,CACL,UAAWjB,EAAG,QAAQ,iBAAiBiB,CAAa,EACpD,iBAAkBjB,EAAG,QAAQ,8BAC3Ba,EAAc,IAAI,CAAC,CAACG,CAAI,IAAMhB,EAAG,QAAQ,kCAAkCgB,CAAI,CAAC,CAClF,EACA,WAAY,CACV,GAAGH,EAAc,IAAI,CAAC,CAACG,EAAME,CAAM,IAAM,CACvC,MAAMC,EAAQ,IAAIlB,EAAoBiB,EAAQ,KAAKb,EAAa,EAAE,QAAQ,EAE1E,OAAOL,EAAG,QAAQ,2BAChB,OACA,OACAgB,EACA,OACAhB,EAAG,QAAQ,oBAAoBmB,CAAK,CACtC,CACF,CAAC,EACDnB,EAAG,QAAQ,2BACT,OACA,OACAiB,EACAjB,EAAG,QAAQ,YAAYA,EAAG,WAAW,aAAa,EAClDA,EAAG,QAAQ,wBAAwB,KAAKQ,EAAmB,CAC7D,CACF,CACF,CACF,CAEAM,GACEM,EACkC,CAClC,GAAI,CAACA,EACH,MAAO,CAAC,EAGV,KAAM,CAAE,OAAAC,EAAQ,SAAAC,CAAS,EAAI,KAAKhB,GAE5BiB,EAAiBD,EAAS,QAAQF,CAAW,EAEnD,OAAIrB,EAAewB,CAAc,GAAK,CAACzB,EAAcyB,CAAc,EAC1D,OAAO,QAASA,EAAwC,UAAU,GAG3EF,EAAO,KAAK,wEAAwE,EAC7E,CAAC,EACV,CACF",
  "names": ["isEmptyObject", "isObjectSchema", "ts", "TypeSchemaProcessor", "defaultMediaType", "EndpointMethodRequestBodyProcessor", "#defaultInitParamName", "#dependencies", "#owner", "#requestBody", "#initTypeIdentifier", "requestBody", "dependencies", "owner", "initTypeIdentifier", "parameterData", "#extractParameterData", "parameterNames", "name", "initParamName", "schema", "nodes", "basicSchema", "logger", "resolver", "resolvedSchema"]
}
