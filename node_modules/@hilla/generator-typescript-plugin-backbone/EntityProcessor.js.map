{
  "version": 3,
  "sources": ["src/EntityProcessor.ts"],
  "sourcesContent": ["import { dirname } from 'path/posix';\nimport type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport {\n  type EnumSchema,\n  type ReferenceSchema,\n  type Schema,\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  isComposedSchema,\n  isEmptyObject,\n  isEnumSchema,\n  isNullableSchema,\n  isObjectSchema,\n  isReferenceSchema,\n  type ObjectSchema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport {\n  convertFullyQualifiedNameToRelativePath,\n  simplifyFullyQualifiedName,\n} from '@hilla/generator-typescript-core/utils.js';\nimport createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport ts, {\n  type Identifier,\n  type InterfaceDeclaration,\n  type SourceFile,\n  type Statement,\n  type TypeElement,\n} from 'typescript';\nimport TypeSchemaProcessor from './TypeSchemaProcessor.js';\n\nexport class EntityProcessor {\n  readonly #component: Schema;\n  readonly #dependencies;\n  readonly #fullyQualifiedName: string;\n  readonly #name: string;\n  readonly #outputPathManager = new PathManager({ extension: 'ts' });\n  readonly #owner: Plugin;\n  readonly #path: string;\n\n  constructor(name: string, component: Schema, owner: Plugin) {\n    this.#component = component;\n    this.#owner = owner;\n    this.#fullyQualifiedName = name;\n    this.#name = simplifyFullyQualifiedName(name);\n    this.#path = convertFullyQualifiedNameToRelativePath(name);\n    this.#dependencies = new DependencyManager(new PathManager({ extension: '.js', relativeTo: dirname(this.#path) }));\n  }\n\n  get #id(): Identifier {\n    const id = ts.factory.createIdentifier(this.#name);\n\n    this.#dependencies.exports.default.set(id);\n\n    return id;\n  }\n\n  process(): SourceFile {\n    this.#owner.logger.debug(`Processing entity: ${this.#name}`);\n\n    const declaration = isEnumSchema(this.#component)\n      ? this.#processEnum(this.#component)\n      : this.#processExtendedClass(this.#component);\n\n    const statements = declaration ? [declaration] : [];\n\n    const { exports, imports } = this.#dependencies;\n\n    return createSourceFile(\n      [...imports.toCode(), ...statements, ...exports.toCode()],\n      this.#outputPathManager.createRelativePath(this.#path),\n    );\n  }\n\n  #processClass(schema: Schema): InterfaceDeclaration | undefined {\n    const { logger } = this.#owner;\n\n    if (!isObjectSchema(schema)) {\n      logger.debug(schema, `Component is not an object: '${this.#fullyQualifiedName}'`);\n      return undefined;\n    }\n\n    if (isEmptyObject(schema)) {\n      logger.debug(`Component has no properties:' ${this.#fullyQualifiedName}'`);\n    }\n\n    return ts.factory.createInterfaceDeclaration(\n      undefined,\n      this.#id,\n      undefined,\n      undefined,\n      this.#processTypeElements(schema as ObjectSchema),\n    );\n  }\n\n  #processEnum({ enum: members }: EnumSchema): Statement {\n    return ts.factory.createEnumDeclaration(\n      undefined,\n      this.#id,\n      members.map((member) => ts.factory.createEnumMember(member, ts.factory.createStringLiteral(member))),\n    );\n  }\n\n  #processExtendedClass(schema: Schema): Statement | undefined {\n    const { logger } = this.#owner;\n\n    if (isComposedSchema(schema)) {\n      const decomposed = decomposeSchema(schema);\n\n      if (decomposed.length > 2) {\n        logger.debug(\n          schema,\n          `Schema for '${this.#fullyQualifiedName}' has more than two components. This plugin will ignore it.`,\n        );\n        return undefined;\n      }\n\n      const [parent, child] = decomposed;\n\n      if (!isReferenceSchema(parent)) {\n        logger.debug(parent, 'Only reference schema allowed for parent class');\n        return undefined;\n      }\n\n      const declaration = this.#processClass(child);\n      const identifier = this.#processParentClass(parent);\n\n      return (\n        declaration &&\n        ts.factory.updateInterfaceDeclaration(\n          declaration,\n          declaration.modifiers,\n          declaration.name,\n          undefined,\n          [\n            ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n              ts.factory.createExpressionWithTypeArguments(identifier, undefined),\n            ]),\n          ],\n          declaration.members,\n        )\n      );\n    }\n\n    return this.#processClass(schema);\n  }\n\n  #processParentClass(schema: ReferenceSchema): Identifier {\n    const { imports, paths } = this.#dependencies;\n\n    const specifier = convertReferenceSchemaToSpecifier(schema);\n    const path = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n\n    return imports.default.getIdentifier(path) ?? imports.default.add(path, specifier, true);\n  }\n\n  #processTypeElements({ properties }: ObjectSchema): readonly TypeElement[] {\n    return Object.entries(properties ?? {}).map(([name, schema]) => {\n      const [type] = new TypeSchemaProcessor(schema, this.#dependencies).process();\n\n      return ts.factory.createPropertySignature(\n        undefined,\n        name,\n        isNullableSchema(schema) ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,\n        type,\n      );\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["dirname", "convertReferenceSchemaToPath", "convertReferenceSchemaToSpecifier", "decomposeSchema", "isComposedSchema", "isEmptyObject", "isEnumSchema", "isNullableSchema", "isObjectSchema", "isReferenceSchema", "convertFullyQualifiedNameToRelativePath", "simplifyFullyQualifiedName", "createSourceFile", "DependencyManager", "PathManager", "ts", "TypeSchemaProcessor", "EntityProcessor", "#component", "#dependencies", "#fullyQualifiedName", "#name", "#outputPathManager", "#owner", "#path", "name", "component", "owner", "#id", "id", "declaration", "#processEnum", "#processExtendedClass", "statements", "exports", "imports", "#processClass", "schema", "logger", "#processTypeElements", "members", "member", "decomposed", "parent", "child", "identifier", "#processParentClass", "paths", "specifier", "path", "properties", "type"]
}
