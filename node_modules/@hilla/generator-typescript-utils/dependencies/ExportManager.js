import n from"typescript";import o from"../createFullyUniqueIdentifier.js";import d from"./StatementRecordManager.js";import{createDependencyRecord as s}from"./utils.js";class l{#e;#t=new Map;constructor(e){this.#e=e}add(e,t,i){const r=i??o(e);return this.#t.set(e,s(r,t)),r}getIdentifier(e){return this.#t.get(e)?.id}*identifiers(){for(const{id:e,isType:t}of this.#t.values())yield[e,t]}isType(e){return this.#t.get(e)?.isType}names(){return this.#t.keys()}toCode(){if(this.#t.size===0)return;const e=[...this.#t.keys()];return e.sort(this.#e.compare),n.factory.createExportDeclaration(void 0,!1,n.factory.createNamedExports(e.map(t=>{const{id:i,isType:r}=this.#t.get(t);return n.factory.createExportSpecifier(r,i,n.factory.createIdentifier(t))})),void 0)}}class f extends d{#e=new Map;addCombined(e,t,i){const r=i??o(t);return this.#e.set(e,r),r}addSpread(e){this.#e.set(e,null)}clear(){this.#e.clear()}getIdentifier(e){return this.#e.get(e)}identifiers(){return this.#e.values()}isCombined(e){return this.#e.has(e)?this.#e.get(e)!==null:void 0}isSpread(e){return this.#e.has(e)?this.#e.get(e)===null:void 0}paths(){return this.#e.keys()}*statementRecords(){for(const[e,t]of this.#e)yield[e,n.factory.createExportDeclaration(void 0,!1,t!==null?n.factory.createNamespaceExport(t):void 0,n.factory.createStringLiteral(e))]}}class p{#e;set(e){return this.#e=typeof e=="string"?n.factory.createIdentifier(e):e,this.#e}toCode(){return this.#e?n.factory.createExportAssignment(void 0,void 0,this.#e):void 0}}class c{default=new p;named;namespace;constructor(e){this.named=new l(e),this.namespace=new f(e)}toCode(){const e=this.default.toCode(),t=this.named.toCode(),i=this.namespace.toCode(),r=[];return t&&r.push(t),r.push(...i),e&&r.push(e),r}}export{p as DefaultExportManager,l as NamedExportManager,f as NamespaceExportManager,c as default};
//# sourceMappingURL=ExportManager.js.map
