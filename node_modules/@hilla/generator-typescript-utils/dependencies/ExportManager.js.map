{
  "version": 3,
  "sources": ["../src/dependencies/ExportManager.ts"],
  "sourcesContent": ["import ts, { type ExportAssignment, type ExportDeclaration, type Identifier, type Statement } from 'typescript';\nimport createFullyUniqueIdentifier from '../createFullyUniqueIdentifier.js';\nimport type CodeConvertable from './CodeConvertable.js';\nimport StatementRecordManager, { type StatementRecord } from './StatementRecordManager.js';\nimport { createDependencyRecord, type DependencyRecord } from './utils.js';\n\nexport class NamedExportManager implements CodeConvertable<ExportDeclaration | undefined> {\n  readonly #collator: Intl.Collator;\n  readonly #map = new Map<string, DependencyRecord>();\n\n  constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  add(name: string, isType?: boolean, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(name, createDependencyRecord(id, isType));\n    return id;\n  }\n\n  getIdentifier(name: string): Identifier | undefined {\n    return this.#map.get(name)?.id;\n  }\n\n  *identifiers(): IterableIterator<readonly [id: Identifier, isType: boolean]> {\n    for (const { id, isType } of this.#map.values()) {\n      yield [id, isType];\n    }\n  }\n\n  isType(name: string): boolean | undefined {\n    return this.#map.get(name)?.isType;\n  }\n\n  names(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  toCode(): ExportDeclaration | undefined {\n    if (this.#map.size === 0) {\n      return undefined;\n    }\n\n    const names = [...this.#map.keys()];\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    names.sort(this.#collator.compare);\n\n    return ts.factory.createExportDeclaration(\n      undefined,\n      false,\n      ts.factory.createNamedExports(\n        names.map((name) => {\n          const { id, isType } = this.#map.get(name)!;\n          return ts.factory.createExportSpecifier(isType, id, ts.factory.createIdentifier(name));\n        }),\n      ),\n      undefined,\n    );\n  }\n}\n\nexport class NamespaceExportManager extends StatementRecordManager<ExportDeclaration> {\n  readonly #map = new Map<string, Identifier | null>();\n\n  addCombined(path: string, name: string, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(path, id);\n    return id;\n  }\n\n  addSpread(path: string): void {\n    this.#map.set(path, null);\n  }\n\n  override clear(): void {\n    this.#map.clear();\n  }\n\n  getIdentifier(path: string): Identifier | null | undefined {\n    return this.#map.get(path);\n  }\n\n  identifiers(): IterableIterator<Identifier | null> {\n    return this.#map.values();\n  }\n\n  isCombined(path: string): boolean | undefined {\n    return this.#map.has(path) ? this.#map.get(path) !== null : undefined;\n  }\n\n  isSpread(path: string): boolean | undefined {\n    return this.#map.has(path) ? this.#map.get(path) === null : undefined;\n  }\n\n  paths(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  override *statementRecords(): IterableIterator<StatementRecord<ExportDeclaration>> {\n    for (const [path, id] of this.#map) {\n      yield [\n        path,\n        ts.factory.createExportDeclaration(\n          undefined,\n          false,\n          id !== null ? ts.factory.createNamespaceExport(id) : undefined,\n          ts.factory.createStringLiteral(path),\n        ),\n      ];\n    }\n  }\n}\n\nexport class DefaultExportManager implements CodeConvertable<ExportAssignment | undefined> {\n  #id?: Identifier;\n\n  set(id: Identifier | string): Identifier {\n    this.#id = typeof id === 'string' ? ts.factory.createIdentifier(id) : id;\n    return this.#id;\n  }\n\n  toCode(): ExportAssignment | undefined {\n    return this.#id ? ts.factory.createExportAssignment(undefined, undefined, this.#id) : undefined;\n  }\n}\n\nexport default class ExportManager implements CodeConvertable<readonly Statement[]> {\n  readonly default = new DefaultExportManager();\n  readonly named: NamedExportManager;\n  readonly namespace: NamespaceExportManager;\n\n  constructor(collator: Intl.Collator) {\n    this.named = new NamedExportManager(collator);\n    this.namespace = new NamespaceExportManager(collator);\n  }\n\n  toCode(): readonly Statement[] {\n    const defaultStatement = this.default.toCode();\n    const namedStatement = this.named.toCode();\n    const namespaceStatements = this.namespace.toCode();\n\n    const result: Statement[] = [];\n\n    if (namedStatement) {\n      result.push(namedStatement);\n    }\n\n    result.push(...namespaceStatements);\n\n    if (defaultStatement) {\n      result.push(defaultStatement);\n    }\n\n    return result;\n  }\n}\n"],
  "mappings": "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",
  "names": ["ts", "createFullyUniqueIdentifier", "StatementRecordManager", "createDependencyRecord", "NamedExportManager", "#collator", "#map", "collator", "name", "isType", "uniqueId", "id", "names", "NamespaceExportManager", "path", "DefaultExportManager", "#id", "ExportManager", "defaultStatement", "namedStatement", "namespaceStatements", "result"]
}
