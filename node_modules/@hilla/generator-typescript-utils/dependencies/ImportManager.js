import a from"typescript";import l from"../createFullyUniqueIdentifier.js";import s from"./StatementRecordManager.js";import{createDependencyRecord as f}from"./utils.js";class I extends s{#e;#t=new Map;constructor(e){super(e),this.#e=e}add(e,t,r,n){const i=f(n??l(t),r);return this.#t.has(e)?this.#t.get(e).set(t,i):this.#t.set(e,new Map([[t,i]])),i.id}clear(){this.#t.clear()}getIdentifier(e,t){return this.#t.get(e)?.get(t)?.id}*identifiers(){for(const[e,t]of this.#t)for(const[r,{id:n,isType:i}]of t)yield[e,r,n,i]}isType(e,t){return this.#t.get(e)?.get(t)?.isType}paths(){return this.#t.keys()}*specifiers(){for(const[e,t]of this.#t)for(const r of t.keys())yield[e,r]}*statementRecords(){for(const[e,t]of this.#t){const r=[...t.keys()];r.sort(this.#e.compare),yield[e,a.factory.createImportDeclaration(void 0,a.factory.createImportClause(!1,void 0,a.factory.createNamedImports(r.map(n=>{const{id:i,isType:o}=t.get(n);return a.factory.createImportSpecifier(o,a.factory.createIdentifier(n),i)}))),a.factory.createStringLiteral(e))]}}}class y extends s{#e=new Map;add(e,t,r){const n=r??l(t);return this.#e.set(e,n),n}clear(){this.#e.clear()}getIdentifier(e){return this.#e.get(e)}*identifiers(){for(const e of this.#e.values())yield e}paths(){return this.#e.keys()}*statementRecords(){for(const[e,t]of this.#e)yield[e,a.factory.createImportDeclaration(void 0,a.factory.createImportClause(!1,void 0,a.factory.createNamespaceImport(t)),a.factory.createStringLiteral(e))]}}class g extends s{#e=new Map;add(e,t,r,n){const i=n??l(t);return this.#e.set(e,f(i,r)),i}getIdentifier(e){return this.#e.get(e)?.id}clear(){this.#e.clear()}*identifiers(){for(const{id:e,isType:t}of this.#e.values())yield[e,t]}isType(e){return this.#e.get(e)?.isType}paths(){return this.#e.keys()}*statementRecords(){for(const[e,{id:t,isType:r}]of this.#e)yield[e,a.factory.createImportDeclaration(void 0,a.factory.createImportClause(r,t,void 0),a.factory.createStringLiteral(e))]}}class h{default;named;namespace;#e;constructor(e){this.default=new g(e),this.named=new I(e),this.namespace=new y(e),this.#e=e}toCode(){const e=[...this.default.statementRecords(),...this.named.statementRecords(),...this.namespace.statementRecords()];return e.sort(s.createComparator(this.#e)),e.map(([,t])=>t)}fromCode(e){this.default.clear(),this.named.clear(),this.namespace.clear();const t=e.statements.filter(r=>a.isImportDeclaration(r));for(const{importClause:r,moduleSpecifier:n}of t){if(!r)continue;const{name:i,namedBindings:o}=r,c=n.text;if(o)if(a.isNamespaceImport(o))this.namespace.add(c,o.name.text,o.name);else for(const{isTypeOnly:m,name:p}of o.elements)this.named.add(c,p.text,m,p);else i&&this.default.add(c,i.text,r.isTypeOnly,i)}}}export{g as DefaultImportManager,I as NamedImportManager,y as NamespaceImportManager,h as default};
//# sourceMappingURL=ImportManager.js.map
