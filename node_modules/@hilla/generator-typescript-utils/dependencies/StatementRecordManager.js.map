{
  "version": 3,
  "sources": ["../src/dependencies/StatementRecordManager.ts"],
  "sourcesContent": ["import type { Statement } from 'typescript';\nimport type CodeConvertable from './CodeConvertable.js';\n\nexport type StatementRecord<T extends Statement> = readonly [path: string, declaration: T];\n\nexport default abstract class StatementRecordManager<T extends Statement> implements CodeConvertable<readonly T[]> {\n  static createComparator<T extends Statement>(\n    collator: Intl.Collator,\n  ): (recordA: StatementRecord<T>, recordB: StatementRecord<T>) => number {\n    return ([pathA], [pathB]) => {\n      if (pathA.startsWith('.') && !pathB.startsWith('.')) {\n        return 1;\n      }\n\n      if (!pathA.startsWith('.') && pathB.startsWith('.')) {\n        return -1;\n      }\n\n      return collator.compare(pathA, pathB);\n    };\n  }\n\n  declare ['constructor']: typeof StatementRecordManager;\n  readonly #collator: Intl.Collator;\n\n  constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  abstract statementRecords(): IterableIterator<StatementRecord<T>>;\n\n  toCode(): readonly T[] {\n    const records = [...this.statementRecords()];\n    records.sort(this.constructor.createComparator(this.#collator));\n\n    return records.map(([, statement]) => statement);\n  }\n\n  abstract clear(): void;\n}\n"],
  "mappings": "AAKA,MAAOA,CAA4G,CACjH,OAAO,iBACLC,EACsE,CACtE,MAAO,CAAC,CAACC,CAAK,EAAG,CAACC,CAAK,IACjBD,EAAM,WAAW,GAAG,GAAK,CAACC,EAAM,WAAW,GAAG,EACzC,EAGL,CAACD,EAAM,WAAW,GAAG,GAAKC,EAAM,WAAW,GAAG,EACzC,GAGFF,EAAS,QAAQC,EAAOC,CAAK,CAExC,CAGSC,GAET,YAAYH,EAAyB,CACnC,KAAKG,GAAYH,CACnB,CAIA,QAAuB,CACrB,MAAMI,EAAU,CAAC,GAAG,KAAK,iBAAiB,CAAC,EAC3C,OAAAA,EAAQ,KAAK,KAAK,YAAY,iBAAiB,KAAKD,EAAS,CAAC,EAEvDC,EAAQ,IAAI,CAAC,CAAC,CAAEC,CAAS,IAAMA,CAAS,CACjD,CAGF",
  "names": ["StatementRecordManager", "collator", "pathA", "pathB", "#collator", "records", "statement"]
}
