{
  "version": 3,
  "sources": ["src/ast.ts"],
  "sourcesContent": ["import ts, {\n  type Node,\n  type SourceFile,\n  type Statement,\n  type TransformationContext,\n  type TransformerFactory,\n} from 'typescript';\n\nexport type TemplateSelector<T> = (statements: readonly Statement[]) => T;\n\nexport function template(\n  code: string,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): readonly Statement[];\nexport function template<T>(\n  code: string,\n  selector: TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T;\nexport function template<T>(\n  code: string,\n  selectorOrTransformers?: ReadonlyArray<TransformerFactory<SourceFile>> | TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T | readonly Statement[] {\n  let selector: TemplateSelector<T> | undefined;\n\n  if (Array.isArray(selectorOrTransformers)) {\n    // eslint-disable-next-line no-param-reassign\n    transformers = selectorOrTransformers;\n  } else {\n    selector = selectorOrTransformers as TemplateSelector<T>;\n  }\n\n  let sourceFile = ts.createSourceFile('f.ts', code, ts.ScriptTarget.Latest, false);\n\n  if (transformers) {\n    [sourceFile] = ts.transform<SourceFile>(\n      sourceFile,\n      transformers as Array<TransformerFactory<SourceFile>>,\n    ).transformed;\n  }\n\n  return selector?.(sourceFile.statements) ?? sourceFile.statements;\n}\n\nexport function transform<T extends Node>(transformer: (node: Node) => Node): TransformerFactory<T> {\n  return (context: TransformationContext) => (root: T) => {\n    const visitor = (node: Node): Node => ts.visitEachChild(transformer(node), visitor, context);\n    return ts.visitEachChild(root, visitor, context);\n  };\n}\n"],
  "mappings": "AAAA,OAAOA,MAMA,aAaA,SAASC,EACdC,EACAC,EACAC,EAC0B,CAC1B,IAAIC,EAEA,MAAM,QAAQF,CAAsB,EAEtCC,EAAeD,EAEfE,EAAWF,EAGb,IAAIG,EAAaN,EAAG,iBAAiB,OAAQE,EAAMF,EAAG,aAAa,OAAQ,EAAK,EAEhF,OAAII,IACF,CAACE,CAAU,EAAIN,EAAG,UAChBM,EACAF,CACF,EAAE,aAGGC,IAAWC,EAAW,UAAU,GAAKA,EAAW,UACzD,CAEO,SAASC,EAA0BC,EAA0D,CAClG,OAAQC,GAAoCC,GAAY,CACtD,MAAMC,EAAWC,GAAqBZ,EAAG,eAAeQ,EAAYI,CAAI,EAAGD,EAASF,CAAO,EAC3F,OAAOT,EAAG,eAAeU,EAAMC,EAASF,CAAO,CACjD,CACF",
  "names": ["ts", "template", "code", "selectorOrTransformers", "transformers", "selector", "sourceFile", "transform", "transformer", "context", "root", "visitor", "node"]
}
