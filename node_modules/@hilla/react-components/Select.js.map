{
  "version": 3,
  "sources": ["src/Select.tsx", "src/generated/Select.ts"],
  "sourcesContent": ["export * from \"@vaadin/select/vaadin-select.js\";\nimport { type ComponentType, type ForwardedRef, forwardRef, type ReactElement, type ReactNode } from 'react';\nimport { Select as _Select, type SelectElement, type SelectProps as _SelectProps } from './generated/Select.js';\nimport { useSimpleOrChildrenRenderer } from './renderers/useSimpleOrChildrenRenderer.js';\nimport type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';\n\nexport * from './generated/Select.js';\n\nexport type SelectReactRendererProps = ReactSimpleRendererProps<SelectElement>;\n\nexport type SelectProps = Partial<Omit<_SelectProps, 'children' | 'renderer'>> &\n  Readonly<{\n    children?: ReactNode | ComponentType<SelectReactRendererProps>;\n    renderer?: ComponentType<SelectReactRendererProps> | null;\n  }>;\n\nfunction Select(props: SelectProps, ref: ForwardedRef<SelectElement>): ReactElement | null {\n  const [portals, renderer] = useSimpleOrChildrenRenderer(props.renderer, props.children);\n\n  return (\n    <_Select {...props} ref={ref} renderer={renderer}>\n      {portals}\n    </_Select>\n  );\n}\n\nconst ForwardedSelect = forwardRef(Select);\n\nexport { ForwardedSelect as Select };\n", "import type { EventName } from \"@lit-labs/react\";\nimport { Select as SelectElement, type SelectEventMap as _SelectEventMap, } from \"@vaadin/select/vaadin-select.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { SelectElement, };\nexport type SelectEventMap = Readonly<{\n    onValidated: EventName<_SelectEventMap[\"validated\"]>;\n    onChange: EventName<_SelectEventMap[\"change\"]>;\n    onInvalidChanged: EventName<_SelectEventMap[\"invalid-changed\"]>;\n    onOpenedChanged: EventName<_SelectEventMap[\"opened-changed\"]>;\n    onValueChanged: EventName<_SelectEventMap[\"value-changed\"]>;\n}>;\nconst events = { onValidated: \"validated\", onChange: \"change\", onInvalidChanged: \"invalid-changed\", onOpenedChanged: \"opened-changed\", onValueChanged: \"value-changed\" } as SelectEventMap;\nexport type SelectProps = WebComponentProps<SelectElement, SelectEventMap>;\nexport const Select = createComponent({\n    elementClass: SelectElement, events, react: React, tagName: \"vaadin-select\"\n});\n"],
  "mappings": "AAAA,WAAc,kCACd,OAAgD,cAAAA,MAAqD,QCArG,OAAS,UAAUC,MAA8D,kCACjF,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BASxD,IAAMC,EAAS,CAAE,YAAa,YAAa,SAAU,SAAU,iBAAkB,kBAAmB,gBAAiB,iBAAkB,eAAgB,eAAgB,EAE1JC,EAASC,EAAgB,CAClC,aAAcC,EAAe,OAAAH,EAAQ,MAAOI,EAAO,QAAS,eAChE,CAAC,EDbD,OAAS,+BAAAC,MAAmC,6CAiBxC,cAAAC,MAAA,oBAJJ,SAASC,EAAOC,EAAoBC,EAAuD,CACzF,GAAM,CAACC,EAASC,CAAQ,EAAIN,EAA4BG,EAAM,SAAUA,EAAM,QAAQ,EAEtF,OACEF,EAACC,EAAA,CAAS,GAAGC,EAAO,IAAKC,EAAK,SAAUE,EACrC,SAAAD,EACH,CAEJ,CAEA,IAAME,EAAkBC,EAAWN,CAAM",
  "names": ["forwardRef", "SelectElement", "React", "createComponent", "events", "Select", "createComponent", "SelectElement", "React", "useSimpleOrChildrenRenderer", "jsx", "Select", "props", "ref", "portals", "renderer", "ForwardedSelect", "forwardRef"]
}
