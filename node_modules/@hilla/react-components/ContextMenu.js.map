{
  "version": 3,
  "sources": ["src/ContextMenu.tsx", "src/generated/ContextMenu.ts"],
  "sourcesContent": ["export * from \"@vaadin/context-menu/vaadin-context-menu.js\";\nimport { type ComponentType, type ForwardedRef, forwardRef, type ReactElement } from 'react';\nimport {\n  ContextMenu as _ContextMenu,\n  type ContextMenuRendererContext,\n  type ContextMenuElement,\n  type ContextMenuProps as _ContextMenuProps,\n} from './generated/ContextMenu.js';\nimport { type ReactContextRendererProps, useContextRenderer } from './renderers/useContextRenderer.js';\n\nexport * from './generated/ContextMenu.js';\n\nexport type ContextMenuReactRendererProps = ReactContextRendererProps<ContextMenuRendererContext, ContextMenuElement>;\n\n// The 'opened' property is omitted because it is readonly in the web component.\n// So you cannot set it up manually, only read from the component.\n// For changing the property, use specific methods of the component.\nexport type ContextMenuProps = Partial<Omit<_ContextMenuProps, 'opened' | 'renderer'>> &\n  Readonly<{\n    renderer?: ComponentType<ContextMenuReactRendererProps> | null;\n  }>;\n\nfunction ContextMenu(props: ContextMenuProps, ref: ForwardedRef<ContextMenuElement>): ReactElement | null {\n  const [portals, renderer] = useContextRenderer(props.renderer);\n\n  return (\n    <_ContextMenu {...props} ref={ref} renderer={renderer}>\n      {props.children}\n      {portals}\n    </_ContextMenu>\n  );\n}\n\nconst ForwardedContextMenu = forwardRef(ContextMenu);\n\nexport { ForwardedContextMenu as ContextMenu };\n", "import type { EventName } from \"@lit-labs/react\";\nimport { ContextMenu as ContextMenuElement, type ContextMenuEventMap as _ContextMenuEventMap, } from \"@vaadin/context-menu/vaadin-context-menu.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { ContextMenuElement, };\nexport type ContextMenuEventMap = Readonly<{\n    onItemSelected: EventName<_ContextMenuEventMap[\"item-selected\"]>;\n    onOpenedChanged: EventName<_ContextMenuEventMap[\"opened-changed\"]>;\n}>;\nconst events = { onItemSelected: \"item-selected\", onOpenedChanged: \"opened-changed\" } as ContextMenuEventMap;\nexport type ContextMenuProps = WebComponentProps<ContextMenuElement, ContextMenuEventMap>;\nexport const ContextMenu = createComponent({\n    elementClass: ContextMenuElement, events, react: React, tagName: \"vaadin-context-menu\"\n});\n"],
  "mappings": "AAAA,WAAc,8CACd,OAAgD,cAAAA,MAAqC,QCArF,OAAS,eAAeC,MAA6E,8CACrG,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAMxD,IAAMC,EAAS,CAAE,eAAgB,gBAAiB,gBAAiB,gBAAiB,EAEvEC,EAAcC,EAAgB,CACvC,aAAcC,EAAoB,OAAAH,EAAQ,MAAOI,EAAO,QAAS,qBACrE,CAAC,EDLD,OAAyC,sBAAAC,MAA0B,oCAkB/D,eAAAC,MAAA,oBAJJ,SAASC,EAAYC,EAAyBC,EAA4D,CACxG,GAAM,CAACC,EAASC,CAAQ,EAAIN,EAAmBG,EAAM,QAAQ,EAE7D,OACEF,EAACC,EAAA,CAAc,GAAGC,EAAO,IAAKC,EAAK,SAAUE,EAC1C,UAAAH,EAAM,SACNE,GACH,CAEJ,CAEA,IAAME,EAAuBC,EAAWN,CAAW",
  "names": ["forwardRef", "ContextMenuElement", "React", "createComponent", "events", "ContextMenu", "createComponent", "ContextMenuElement", "React", "useContextRenderer", "jsxs", "ContextMenu", "props", "ref", "portals", "renderer", "ForwardedContextMenu", "forwardRef"]
}
