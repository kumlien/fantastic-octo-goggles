import{constants as a}from"node:fs";import{access as l,mkdir as o,readFile as c,rm as g,writeFile as d}from"node:fs/promises";import{createRequire as u}from"node:module";import{dirname as m,isAbsolute as h,join as y,resolve as s}from"node:path";import{pathToFileURL as p}from"node:url";import w from"@hilla/generator-typescript-core/Plugin.js";import F from"./GeneratorIOException.js";const b=u(import.meta.url);class f{static INDEX_FILENAME="generated-file-list.txt";cwd;#t;#e;constructor(t,e){this.cwd=process.cwd(),this.#e=h(t)?t:s(this.cwd,t),this.#t=e,e.global.debug(`Output directory: ${this.#e}`)}async getGeneratedFiles(){const t=new Set;try{(await this.read(this.resolveGeneratedFile(this.constructor.INDEX_FILENAME))).split(`
`).filter(r=>r.length).forEach(r=>t.add(r))}catch(e){if(!(e instanceof Error&&"code"in e&&e.code==="ENOENT"))throw e}return t}async cleanOutputDir(t,e){return this.#t.global.debug(`Cleaning ${this.#e}`),await o(this.#e,{recursive:!0}),t.forEach(i=>{this.#t.global.debug(`File ${i} was re-written, should not delete it`),e.delete(i)}),new Set(await Promise.all([...e].map(async i=>{const n=this.resolveGeneratedFile(i);return await this.exists(n)&&(this.#t.global.debug(`Deleting file ${i}.`),await g(n)),i})))}async createFileIndex(t){await this.write(this.constructor.INDEX_FILENAME,t.join(`
`))}async writeGeneratedFiles(t){return await this.createFileIndex(t.map(e=>e.name)),this.#t.global.debug("created index"),Promise.all(t.map(async e=>{const r=await e.text();let i;try{i=await this.read(this.resolveGeneratedFile(e.name))}catch{}return r!==i?(this.#t.global.debug(`writing file ${e.name}`),await this.write(e.name,await e.text())):this.#t.global.debug(`File ${e.name} stayed the same`),e.name}))}async exists(t){try{return await l(t,a.F_OK),!0}catch{return!1}}async loadPlugin(t){this.#t.global.debug(`Loading plugin: ${t}`);const r=(await import(p(b.resolve(t)).toString())).default;if(!Object.prototype.isPrototypeOf.call(w,r))throw new F(`Plugin '${t}' is not an instance of a Plugin class`);return r}resolveGeneratedFile(t){return s(this.#e,t)}async read(t){return this.#t.global.debug(`Reading file: ${t}`),c(t,"utf8")}async write(t,e){const r=y(this.#e,t);this.#t.global.debug(`Writing file ${r}.`);const i=m(r);return await o(i,{recursive:!0}),d(r,e,"utf-8")}}export{f as default};
//# sourceMappingURL=GeneratorIO.js.map
