import i from"@hilla/generator-typescript-core/Generator.js";import n from"@hilla/generator-typescript-utils/LoggerFactory.js";import s from"meow";import a from"./GeneratorIO.js";import{processInput as p}from"./utils.js";const{flags:{outputDir:t,plugin:l,verbose:g},input:[u]}=s(`
Usage:
  tsgen
    (will read JSON from stdin)
  tsgen <OpenAPI JSON string>
  tsgen <OpenAPI file path>

Options:
  -h, --help             Show this screen
  -o, --output-dir       Output directory
  -p, --plugin <path>    Use the plugin loadable by <path>.
  --version              Show the app version
`,{flags:{outputDir:{default:"frontend/generated",shortFlag:"o",type:"string"},plugin:{default:[],isMultiple:!0,shortFlag:"p",type:"string"},verbose:{shortFlag:"v",type:"boolean"}},importMeta:import.meta}),o=new n({verbose:g}),e=new a(t,o),m=await Promise.all(Array.from(new Set(l),async r=>e.loadPlugin(r))),c=new i(m,{logger:o,outputDir:t}),f=await c.process(await p(e,u)),w=await e.getGeneratedFiles(),d=await e.writeGeneratedFiles(f);await e.cleanOutputDir(d,w);
//# sourceMappingURL=index.js.map
