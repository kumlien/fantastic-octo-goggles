import{getBinderNode as d}from"./BinderNode.js";import{NumberModel as u}from"./Models.js";import{Required as p}from"./Validators.js";class y extends Error{errors;constructor(e){super(["There are validation errors in the form.",...e.map(o=>`${o.property.toString()} - ${o.validator.constructor.name}${o.message?`: ${o.message}`:""}`)].join(`
 - `)),this.errors=e,this.name=this.constructor.name}}class V{message;constructor(e){this.message=e}validate=()=>!1}function i(a,e){return typeof e.property=="string"&&a.length>0&&(e.property=`${a}.${e.property}`),e}async function f(a,e,o){const t=d(a),n=t.value,s=r=>o?o(r,e,t):r;if(!t.required&&!new p().validate(n)&&!(a instanceof u))return[];try{const r=await e.validate(n,t.binder);return r===!1?[{message:s(e.message),property:t.name,validator:e,value:n}]:r===!0||Array.isArray(r)&&r.length===0?[]:Array.isArray(r)?r.map(l=>({message:s(e.message),...i(t.name,l),validator:e,value:n})):[{message:s(e.message),...i(t.name,r),validator:e,value:n}]}catch(r){return console.error(`${t.name} - Validator ${e.constructor.name} threw an error:`,r),[{message:"Validator threw an error",property:t.name,validator:e,value:n}]}}export{V as ServerValidator,y as ValidationError,f as runValidator};
//# sourceMappingURL=Validation.js.map
