{
  "version": 3,
  "sources": ["src/property-info.ts"],
  "sourcesContent": ["import {\n  BooleanModel,\n  NumberModel,\n  StringModel,\n  _meta,\n  createDetachedModel,\n  type AbstractModel,\n  type DetachedModelConstructor,\n  type ModelMetadata,\n} from '@hilla/form';\n\nexport type PropertyType = 'boolean' | 'date' | 'datetime' | 'number' | 'string' | 'time' | undefined;\n\nconst javaTypeMap: Record<string, PropertyType> = {\n  'java.util.Date': 'date',\n  'java.time.LocalDate': 'date',\n  'java.time.LocalTime': 'time',\n  'java.time.LocalDateTime': 'datetime',\n};\n\nfunction determinePropertyType(model: AbstractModel): PropertyType {\n  // Try detecting by Java type\n  const { javaType } = model[_meta];\n  const propertyType = javaType ? javaTypeMap[javaType] : undefined;\n  if (propertyType) {\n    return propertyType;\n  }\n\n  // Otherwise detect by model constructor\n  const { constructor } = model;\n  if (constructor === StringModel) {\n    return 'string';\n  } else if (constructor === NumberModel) {\n    return 'number';\n  } else if (constructor === BooleanModel) {\n    return 'boolean';\n  }\n  return undefined;\n}\n\nexport interface PropertyInfo {\n  name: string;\n  humanReadableName: string;\n  type: PropertyType;\n  meta: ModelMetadata;\n}\n\nexport function hasAnnotation(meta: ModelMetadata, annotationName: string): boolean {\n  return meta.annotations?.some((annotation) => annotation.name === annotationName) ?? false;\n}\n\n// This is from vaadin-grid-column.js, should be used from there maybe. At least we must be 100% sure to match grid and fields\nexport function _generateHeader(path: string): string {\n  return path\n    .substring(path.lastIndexOf('.') + 1)\n    .replace(/([A-Z])/gu, '-$1')\n    .toLowerCase()\n    .replace(/-/gu, ' ')\n    .replace(/^./u, (match) => match.toUpperCase());\n}\n\nexport const getPropertyIds = (model: DetachedModelConstructor<AbstractModel>): string[] =>\n  Object.keys(Object.getOwnPropertyDescriptors(model.prototype)).filter((p) => p !== 'constructor');\n\nexport const getProperties = (model: DetachedModelConstructor<AbstractModel>): PropertyInfo[] => {\n  const propertyIds = getPropertyIds(model);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  const modelInstance: any = createDetachedModel(model);\n  return propertyIds.flatMap((name) => {\n    // eslint-disable-next-line\n    const propertyModel = modelInstance[name] as AbstractModel;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const meta = propertyModel[_meta];\n    const humanReadableName = _generateHeader(name);\n    const type = determinePropertyType(propertyModel);\n\n    if (hasAnnotation(meta, 'jakarta.persistence.OneToOne')) {\n      // Expand sub properties\n      const subProps = getProperties(propertyModel.constructor as any);\n      return subProps.map((prop) => ({ ...prop, name: `${name}.${prop.name}` }));\n    }\n\n    return {\n      name,\n      humanReadableName,\n      type,\n      meta,\n    };\n  });\n};\n\nexport function includeProperty(propertyInfo: PropertyInfo): unknown {\n  // Exclude properties annotated with id and version\n  if (\n    hasAnnotation(propertyInfo.meta, 'jakarta.persistence.Id') ||\n    hasAnnotation(propertyInfo.meta, 'jakarta.persistence.Version')\n  ) {\n    return false;\n  }\n  if (!propertyInfo.type) {\n    // Do not render columns we do not know how to render\n    return false;\n  }\n  return true;\n}\n\nexport function getIdProperty(properties: PropertyInfo[]): PropertyInfo | undefined {\n  const idProperty = properties.find((propertyInfo) => hasAnnotation(propertyInfo.meta, 'jakarta.persistence.Id'));\n  if (idProperty) {\n    return idProperty;\n  }\n\n  return undefined;\n}\n"],
  "mappings": "AAAA,OACE,gBAAAA,EACA,eAAAC,EACA,eAAAC,EACA,SAAAC,EACA,uBAAAC,MAIK,cAIP,MAAMC,EAA4C,CAChD,iBAAkB,OAClB,sBAAuB,OACvB,sBAAuB,OACvB,0BAA2B,UAC7B,EAEA,SAASC,EAAsBC,EAAoC,CAEjE,KAAM,CAAE,SAAAC,CAAS,EAAID,EAAMJ,CAAK,EAC1BM,EAAeD,EAAWH,EAAYG,CAAQ,EAAI,OACxD,GAAIC,EACF,OAAOA,EAIT,KAAM,CAAE,YAAAC,CAAY,EAAIH,EACxB,GAAIG,IAAgBR,EAClB,MAAO,SACF,GAAIQ,IAAgBT,EACzB,MAAO,SACF,GAAIS,IAAgBV,EACzB,MAAO,SAGX,CASO,SAASW,EAAcC,EAAqBC,EAAiC,CAClF,OAAOD,EAAK,aAAa,KAAME,GAAeA,EAAW,OAASD,CAAc,GAAK,EACvF,CAGO,SAASE,EAAgBC,EAAsB,CACpD,OAAOA,EACJ,UAAUA,EAAK,YAAY,GAAG,EAAI,CAAC,EACnC,QAAQ,YAAa,KAAK,EAC1B,YAAY,EACZ,QAAQ,MAAO,GAAG,EAClB,QAAQ,MAAQC,GAAUA,EAAM,YAAY,CAAC,CAClD,CAEO,MAAMC,EAAkBX,GAC7B,OAAO,KAAK,OAAO,0BAA0BA,EAAM,SAAS,CAAC,EAAE,OAAQY,GAAMA,IAAM,aAAa,EAErFC,EAAiBb,GAAmE,CAC/F,MAAMc,EAAcH,EAAeX,CAAK,EAElCe,EAAqBlB,EAAoBG,CAAK,EACpD,OAAOc,EAAY,QAASE,GAAS,CAEnC,MAAMC,EAAgBF,EAAcC,CAAI,EAElCX,EAAOY,EAAcrB,CAAK,EAC1BsB,EAAoBV,EAAgBQ,CAAI,EACxCG,EAAOpB,EAAsBkB,CAAa,EAEhD,OAAIb,EAAcC,EAAM,8BAA8B,EAEnCQ,EAAcI,EAAc,WAAkB,EAC/C,IAAKG,IAAU,CAAE,GAAGA,EAAM,KAAM,GAAGJ,CAAI,IAAII,EAAK,IAAI,EAAG,EAAE,EAGpE,CACL,KAAAJ,EACA,kBAAAE,EACA,KAAAC,EACA,KAAAd,CACF,CACF,CAAC,CACH,EAEO,SAASgB,EAAgBC,EAAqC,CAQnE,MALE,EAAAlB,EAAckB,EAAa,KAAM,wBAAwB,GACzDlB,EAAckB,EAAa,KAAM,6BAA6B,GAI5D,CAACA,EAAa,KAKpB,CAEO,SAASC,EAAcC,EAAsD,CAClF,MAAMC,EAAaD,EAAW,KAAMF,GAAiBlB,EAAckB,EAAa,KAAM,wBAAwB,CAAC,EAC/G,GAAIG,EACF,OAAOA,CAIX",
  "names": ["BooleanModel", "NumberModel", "StringModel", "_meta", "createDetachedModel", "javaTypeMap", "determinePropertyType", "model", "javaType", "propertyType", "constructor", "hasAnnotation", "meta", "annotationName", "annotation", "_generateHeader", "path", "match", "getPropertyIds", "p", "getProperties", "propertyIds", "modelInstance", "name", "propertyModel", "humanReadableName", "type", "prop", "includeProperty", "propertyInfo", "getIdProperty", "properties", "idProperty"]
}
