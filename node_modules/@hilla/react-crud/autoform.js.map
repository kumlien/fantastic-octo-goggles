{
  "version": 3,
  "sources": ["src/autoform.tsx"],
  "sourcesContent": ["import { type AbstractModel, type DetachedModelConstructor, ValidationError } from '@hilla/form';\nimport { Button } from '@hilla/react-components/Button.js';\nimport { HorizontalLayout } from '@hilla/react-components/HorizontalLayout.js';\nimport { VerticalLayout } from '@hilla/react-components/VerticalLayout.js';\nimport { useForm } from '@hilla/react-form';\nimport { type JSX, useEffect, useState } from 'react';\nimport { AutoFormField } from './autoform-field.js';\nimport type { CrudService } from './crud.js';\nimport { getProperties, includeProperty } from './property-info.js';\n\nexport const defaultItem = Symbol();\n\ntype SubmitErrorEvent = {\n  error: unknown;\n};\ntype SubmitEvent<TItem> = {\n  item: TItem;\n};\n\nexport type AutoFormProps<TItem> = Readonly<{\n  service: CrudService<TItem>;\n  model: DetachedModelConstructor<AbstractModel<TItem>>;\n  item?: TItem | typeof defaultItem;\n  disabled?: boolean;\n  onSubmitError?({ error }: SubmitErrorEvent): void;\n  afterSubmit?({ item }: SubmitEvent<TItem>): void;\n}>;\n\nexport function ExperimentalAutoForm<TItem>({\n  service,\n  model,\n  item,\n  onSubmitError,\n  afterSubmit,\n  disabled,\n}: AutoFormProps<TItem>): JSX.Element {\n  const form = useForm(model, {\n    onSubmit: async (formItem) => service.save(formItem),\n  });\n  const [formError, setFormError] = useState('');\n  useEffect(() => {\n    if (item !== defaultItem) {\n      form.read(item);\n    }\n  }, [item]);\n\n  async function submitButtonClicked(): Promise<void> {\n    try {\n      setFormError('');\n      const newItem = await form.submit();\n      if (newItem === undefined) {\n        // If update returns an empty object, then no update was performed\n        throw new Error('generic error');\n      } else if (afterSubmit) {\n        afterSubmit({ item: newItem });\n      }\n    } catch (error) {\n      if (error instanceof ValidationError) {\n        // Handled automatically\n        return;\n      }\n      const genericError = 'Something went wrong, please check all your values';\n      if (onSubmitError) {\n        onSubmitError({ error });\n      } else {\n        setFormError(genericError);\n      }\n    }\n  }\n\n  return (\n    <VerticalLayout theme=\"padding\">\n      {getProperties(model)\n        .filter(includeProperty)\n        .map((propertyInfo) => (\n          <AutoFormField key={propertyInfo.name} propertyInfo={propertyInfo} form={form} disabled={disabled} />\n        ))}\n      {formError ? <div style={{ color: 'var(--lumo-error-color)' }}>{formError}</div> : <></>}\n      <HorizontalLayout style={{ marginTop: 'var(--lumo-space-m)' }}>\n        <Button\n          disabled={disabled}\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          onClick={submitButtonClicked}\n        >\n          Submit\n        </Button>\n      </HorizontalLayout>\n    </VerticalLayout>\n  );\n}\n"],
  "mappings": "AAuEI,OAMqF,YAAAA,EAF/E,OAAAC,EAJN,QAAAC,MAAA,oBAvEJ,OAA4D,mBAAAC,MAAuB,cACnF,OAAS,UAAAC,MAAc,oCACvB,OAAS,oBAAAC,MAAwB,8CACjC,OAAS,kBAAAC,MAAsB,4CAC/B,OAAS,WAAAC,MAAe,oBACxB,OAAmB,aAAAC,EAAW,YAAAC,MAAgB,QAC9C,OAAS,iBAAAC,MAAqB,sBAE9B,OAAS,iBAAAC,EAAe,mBAAAC,MAAuB,qBAExC,MAAMC,EAAc,OAAO,EAkB3B,SAASC,EAA4B,CAC1C,QAAAC,EACA,MAAAC,EACA,KAAAC,EACA,cAAAC,EACA,YAAAC,EACA,SAAAC,CACF,EAAsC,CACpC,MAAMC,EAAOd,EAAQS,EAAO,CAC1B,SAAU,MAAOM,GAAaP,EAAQ,KAAKO,CAAQ,CACrD,CAAC,EACK,CAACC,EAAWC,CAAY,EAAIf,EAAS,EAAE,EAC7CD,EAAU,IAAM,CACVS,IAASJ,GACXQ,EAAK,KAAKJ,CAAI,CAElB,EAAG,CAACA,CAAI,CAAC,EAET,eAAeQ,GAAqC,CAClD,GAAI,CACFD,EAAa,EAAE,EACf,MAAME,EAAU,MAAML,EAAK,OAAO,EAClC,GAAIK,IAAY,OAEd,MAAM,IAAI,MAAM,eAAe,EACtBP,GACTA,EAAY,CAAE,KAAMO,CAAQ,CAAC,CAEjC,OAASC,EAAO,CACd,GAAIA,aAAiBxB,EAEnB,OAGEe,EACFA,EAAc,CAAE,MAAAS,CAAM,CAAC,EAEvBH,EAJmB,oDAIM,CAE7B,CACF,CAEA,OACEtB,EAACI,EAAA,CAAe,MAAM,UACnB,UAAAK,EAAcK,CAAK,EACjB,OAAOJ,CAAe,EACtB,IAAKgB,GACJ3B,EAACS,EAAA,CAAsC,aAAckB,EAAc,KAAMP,EAAM,SAAUD,GAArEQ,EAAa,IAAkE,CACpG,EACFL,EAAYtB,EAAC,OAAI,MAAO,CAAE,MAAO,yBAA0B,EAAI,SAAAsB,EAAU,EAAStB,EAAAD,EAAA,EAAE,EACrFC,EAACI,EAAA,CAAiB,MAAO,CAAE,UAAW,qBAAsB,EAC1D,SAAAJ,EAACG,EAAA,CACC,SAAUgB,EAEV,QAASK,EACV,kBAED,EACF,GACF,CAEJ",
  "names": ["Fragment", "jsx", "jsxs", "ValidationError", "Button", "HorizontalLayout", "VerticalLayout", "useForm", "useEffect", "useState", "AutoFormField", "getProperties", "includeProperty", "defaultItem", "ExperimentalAutoForm", "service", "model", "item", "onSubmitError", "afterSubmit", "disabled", "form", "formItem", "formError", "setFormError", "submitButtonClicked", "newItem", "error", "propertyInfo"]
}
