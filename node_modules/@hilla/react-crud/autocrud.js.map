{
  "version": 3,
  "sources": ["src/autocrud.tsx"],
  "sourcesContent": ["import type { AbstractModel, DetachedModelConstructor } from '@hilla/form';\nimport { Button } from '@hilla/react-components/Button.js';\nimport type { GridElement } from '@hilla/react-components/Grid.js';\nimport { GridColumn } from '@hilla/react-components/GridColumn.js';\nimport { HorizontalLayout } from '@hilla/react-components/HorizontalLayout.js';\nimport { VerticalLayout } from '@hilla/react-components/VerticalLayout.js';\nimport { type JSX, useState } from 'react';\nimport { AutoCrudContext } from './autocrud-context.js';\nimport DeleteButton from './autocrud-delete.js';\nimport { defaultItem, ExperimentalAutoForm } from './autoform.js';\nimport { AutoGrid } from './autogrid.js';\nimport type { CrudService } from './crud.js';\nimport { getProperties } from './property-info.js';\n\nexport type AutoCrudProps<TItem> = Readonly<{\n  service: CrudService<TItem>;\n  model: DetachedModelConstructor<AbstractModel<TItem>>;\n  noDelete?: boolean;\n  header?: string;\n}>;\n\nexport function ExperimentalAutoCrud<TItem>({ service, model, noDelete, header }: AutoCrudProps<TItem>): JSX.Element {\n  const [item, setItem] = useState<TItem | typeof defaultItem | undefined>(undefined);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  const customColumns = [];\n  if (!noDelete) {\n    customColumns.push(<GridColumn key=\"deletebutton\" autoWidth renderer={DeleteButton}></GridColumn>);\n  }\n\n  return (\n    <>\n      <AutoCrudContext.Provider\n        value={{ service, properties: getProperties(model), refreshGrid: () => setRefreshTrigger(refreshTrigger + 1) }}\n      >\n        <VerticalLayout style={{ flex: 1 }}>\n          <HorizontalLayout\n            style={{\n              width: '100%',\n              justifyContent: header ? 'space-between' : 'end',\n              paddingLeft: 'var(--lumo-space-m)',\n              paddingRight: 'var(--lumo-space-m)',\n              paddingBottom: 'var(--lumo-space-s)',\n              paddingTop: 'var(--lumo-space-s)',\n              alignItems: 'center',\n            }}\n          >\n            {header ? <h2 style={{ fontSize: 'var(--lumo-font-size-l)' }}>{header}</h2> : <></>}\n            <Button theme=\"primary\" onClick={() => setItem(defaultItem)}>\n              + New\n            </Button>\n          </HorizontalLayout>\n          <HorizontalLayout style={{ width: '100%' }}>\n            <AutoGrid\n              refreshTrigger={refreshTrigger}\n              service={service}\n              model={model}\n              onActiveItemChanged={(e) => {\n                const activeItem = e.detail.value;\n                (e.target as GridElement).selectedItems = activeItem ? [activeItem] : [];\n              }}\n              onSelectedItemsChanged={(e) => {\n                if (e.detail.value.length === 0) {\n                  setItem(undefined);\n                } else {\n                  const selectedItem = e.detail.value[0];\n                  setItem({ ...selectedItem });\n                }\n              }}\n              customColumns={customColumns}\n            ></AutoGrid>\n            <ExperimentalAutoForm\n              disabled={!item}\n              service={service}\n              model={model}\n              item={item}\n              afterSubmit={({ item: submittedItem }) => {\n                setItem(submittedItem);\n                // Trigger grid data refresh\n                setRefreshTrigger(refreshTrigger + 1);\n              }}\n            />\n          </HorizontalLayout>\n        </VerticalLayout>\n      </AutoCrudContext.Provider>\n    </>\n  );\n}\n"],
  "mappings": "AA2BuB,OAoBmE,YAAAA,EApBnE,OAAAC,EASb,QAAAC,MATa,oBA1BvB,OAAS,UAAAC,MAAc,oCAEvB,OAAS,cAAAC,MAAkB,wCAC3B,OAAS,oBAAAC,MAAwB,8CACjC,OAAS,kBAAAC,MAAsB,4CAC/B,OAAmB,YAAAC,MAAgB,QACnC,OAAS,mBAAAC,MAAuB,wBAChC,OAAOC,MAAkB,uBACzB,OAAS,eAAAC,EAAa,wBAAAC,MAA4B,gBAClD,OAAS,YAAAC,MAAgB,gBAEzB,OAAS,iBAAAC,MAAqB,qBASvB,SAASC,EAA4B,CAAE,QAAAC,EAAS,MAAAC,EAAO,SAAAC,EAAU,OAAAC,CAAO,EAAsC,CACnH,KAAM,CAACC,EAAMC,CAAO,EAAIb,EAAiD,MAAS,EAC5E,CAACc,EAAgBC,CAAiB,EAAIf,EAAS,CAAC,EAEhDgB,EAAgB,CAAC,EACvB,OAAKN,GACHM,EAAc,KAAKtB,EAACG,EAAA,CAA8B,UAAS,GAAC,SAAUK,GAAnC,cAAiD,CAAa,EAIjGR,EAAAD,EAAA,CACE,SAAAC,EAACO,EAAgB,SAAhB,CACC,MAAO,CAAE,QAAAO,EAAS,WAAYF,EAAcG,CAAK,EAAG,YAAa,IAAMM,EAAkBD,EAAiB,CAAC,CAAE,EAE7G,SAAAnB,EAACI,EAAA,CAAe,MAAO,CAAE,KAAM,CAAE,EAC/B,UAAAJ,EAACG,EAAA,CACC,MAAO,CACL,MAAO,OACP,eAAgBa,EAAS,gBAAkB,MAC3C,YAAa,sBACb,aAAc,sBACd,cAAe,sBACf,WAAY,sBACZ,WAAY,QACd,EAEC,UAAAA,EAASjB,EAAC,MAAG,MAAO,CAAE,SAAU,yBAA0B,EAAI,SAAAiB,EAAO,EAAQjB,EAAAD,EAAA,EAAE,EAChFC,EAACE,EAAA,CAAO,MAAM,UAAU,QAAS,IAAMiB,EAAQV,CAAW,EAAG,iBAE7D,GACF,EACAR,EAACG,EAAA,CAAiB,MAAO,CAAE,MAAO,MAAO,EACvC,UAAAJ,EAACW,EAAA,CACC,eAAgBS,EAChB,QAASN,EACT,MAAOC,EACP,oBAAsBQ,GAAM,CAC1B,MAAMC,EAAaD,EAAE,OAAO,MAC3BA,EAAE,OAAuB,cAAgBC,EAAa,CAACA,CAAU,EAAI,CAAC,CACzE,EACA,uBAAyBD,GAAM,CAC7B,GAAIA,EAAE,OAAO,MAAM,SAAW,EAC5BJ,EAAQ,MAAS,MACZ,CACL,MAAMM,EAAeF,EAAE,OAAO,MAAM,CAAC,EACrCJ,EAAQ,CAAE,GAAGM,CAAa,CAAC,CAC7B,CACF,EACA,cAAeH,EAChB,EACDtB,EAACU,EAAA,CACC,SAAU,CAACQ,EACX,QAASJ,EACT,MAAOC,EACP,KAAMG,EACN,YAAa,CAAC,CAAE,KAAMQ,CAAc,IAAM,CACxCP,EAAQO,CAAa,EAErBL,EAAkBD,EAAiB,CAAC,CACtC,EACF,GACF,GACF,EACF,EACF,CAEJ",
  "names": ["Fragment", "jsx", "jsxs", "Button", "GridColumn", "HorizontalLayout", "VerticalLayout", "useState", "AutoCrudContext", "DeleteButton", "defaultItem", "ExperimentalAutoForm", "AutoGrid", "getProperties", "ExperimentalAutoCrud", "service", "model", "noDelete", "header", "item", "setItem", "refreshTrigger", "setRefreshTrigger", "customColumns", "e", "activeItem", "selectedItem", "submittedItem"]
}
