{
  "version": 3,
  "sources": ["src/autogrid-renderers.tsx"],
  "sourcesContent": ["import type { GridItemModel } from '@hilla/react-components/Grid.js';\nimport type { GridColumnElement } from '@hilla/react-components/GridColumn.js';\nimport { Icon } from '@hilla/react-components/Icon.js';\nimport { useContext } from 'react';\nimport { ColumnContext } from './autogrid-column-context';\nimport { defaultLocale } from './i18n.js';\n// eslint-disable-next-line\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\n\nexport type RendererOptions<TItem> = {\n  item: TItem;\n  model: GridItemModel<TItem>;\n  original: GridColumnElement<TItem>;\n};\n\nfunction getColumnValue<TItem>(context: ColumnContext, item: TItem): any {\n  const path = context.propertyInfo.name;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return path.split('.').reduce<any>((obj, property) => (obj ? obj[property] : undefined), item);\n}\n\nexport function AutoGridNumberRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const formatted = Number.isFinite(value)\n    ? new Intl.NumberFormat(defaultLocale, {\n        maximumFractionDigits: 0,\n      }).format(value)\n    : '';\n  return <span style={{ fontVariantNumeric: 'tabular-nums' }}>{formatted}</span>;\n}\n\nexport function AutoGridBooleanRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  if (value) {\n    return <Icon aria-label=\"false\" icon=\"lumo:checkmark\" />;\n  }\n  return <Icon aria-label=\"true\" style={{ color: 'var(--lumo-secondary-text-color)' }} icon=\"lumo:minus\" />;\n}\n\nfunction tryFormatDateTime(value: string, options?: Intl.DateTimeFormatOptions): string {\n  try {\n    const format = new Intl.DateTimeFormat(defaultLocale, options);\n    return format.format(new Date(value));\n  } catch (e) {\n    return '';\n  }\n}\n\nexport function AutoGridDateRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const formatted = value ? tryFormatDateTime(value) : '';\n  return <span style={{ fontVariantNumeric: 'tabular-nums' }}>{formatted}</span>;\n}\n\nexport function AutoGridTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item) as string;\n  const formatted = value\n    ? tryFormatDateTime(`2000-01-01T${value}`, {\n        hour: 'numeric',\n        minute: 'numeric',\n      })\n    : '';\n  return <span style={{ fontVariantNumeric: 'tabular-nums' }}>{formatted}</span>;\n}\n\nexport function AutoGridDateTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const formatted = value\n    ? tryFormatDateTime(value, {\n        day: 'numeric',\n        month: 'numeric',\n        year: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n      })\n    : '';\n  return <span style={{ fontVariantNumeric: 'tabular-nums' }}>{formatted}</span>;\n}\n\nexport function AutoGridRowNumberRenderer<TItem>({ model }: RendererOptions<TItem>): JSX.Element {\n  return <>{model.index + 1}</>;\n}\n"],
  "mappings": "AA6BS,OAwDA,YAAAA,EAxDA,OAAAC,MAAA,oBA3BT,OAAS,QAAAC,MAAY,kCACrB,OAAS,cAAAC,MAAkB,QAC3B,OAAS,iBAAAC,MAAqB,4BAC9B,OAAS,iBAAAC,MAAqB,YAE9B,MAAO,+CAQP,SAASC,EAAsBC,EAAwBC,EAAkB,CAGvE,OAFaD,EAAQ,aAAa,KAEtB,MAAM,GAAG,EAAE,OAAY,CAACE,EAAKC,IAAcD,EAAMA,EAAIC,CAAQ,EAAI,OAAYF,CAAI,CAC/F,CAEO,SAASG,EAA8B,CAAE,KAAAH,CAAK,EAAwC,CAC3F,MAAMD,EAAUJ,EAAWC,CAAa,EAClCQ,EAAQN,EAAeC,EAASC,CAAI,EACpCK,EAAY,OAAO,SAASD,CAAK,EACnC,IAAI,KAAK,aAAaP,EAAe,CACnC,sBAAuB,CACzB,CAAC,EAAE,OAAOO,CAAK,EACf,GACJ,OAAOX,EAAC,QAAK,MAAO,CAAE,mBAAoB,cAAe,EAAI,SAAAY,EAAU,CACzE,CAEO,SAASC,EAA+B,CAAE,KAAAN,CAAK,EAAwC,CAC5F,MAAMD,EAAUJ,EAAWC,CAAa,EAExC,OADcE,EAAeC,EAASC,CAAI,EAEjCP,EAACC,EAAA,CAAK,aAAW,QAAQ,KAAK,iBAAiB,EAEjDD,EAACC,EAAA,CAAK,aAAW,OAAO,MAAO,CAAE,MAAO,kCAAmC,EAAG,KAAK,aAAa,CACzG,CAEA,SAASa,EAAkBH,EAAeI,EAA8C,CACtF,GAAI,CAEF,OADe,IAAI,KAAK,eAAeX,EAAeW,CAAO,EAC/C,OAAO,IAAI,KAAKJ,CAAK,CAAC,CACtC,MAAY,CACV,MAAO,EACT,CACF,CAEO,SAASK,EAA4B,CAAE,KAAAT,CAAK,EAAwC,CACzF,MAAMD,EAAUJ,EAAWC,CAAa,EAClCQ,EAAQN,EAAeC,EAASC,CAAI,EACpCK,EAAYD,EAAQG,EAAkBH,CAAK,EAAI,GACrD,OAAOX,EAAC,QAAK,MAAO,CAAE,mBAAoB,cAAe,EAAI,SAAAY,EAAU,CACzE,CAEO,SAASK,EAA4B,CAAE,KAAAV,CAAK,EAAwC,CACzF,MAAMD,EAAUJ,EAAWC,CAAa,EAClCQ,EAAQN,EAAeC,EAASC,CAAI,EACpCK,EAAYD,EACdG,EAAkB,cAAcH,CAAK,GAAI,CACvC,KAAM,UACN,OAAQ,SACV,CAAC,EACD,GACJ,OAAOX,EAAC,QAAK,MAAO,CAAE,mBAAoB,cAAe,EAAI,SAAAY,EAAU,CACzE,CAEO,SAASM,EAAgC,CAAE,KAAAX,CAAK,EAAwC,CAC7F,MAAMD,EAAUJ,EAAWC,CAAa,EAClCQ,EAAQN,EAAeC,EAASC,CAAI,EACpCK,EAAYD,EACdG,EAAkBH,EAAO,CACvB,IAAK,UACL,MAAO,UACP,KAAM,UACN,KAAM,UACN,OAAQ,SACV,CAAC,EACD,GACJ,OAAOX,EAAC,QAAK,MAAO,CAAE,mBAAoB,cAAe,EAAI,SAAAY,EAAU,CACzE,CAEO,SAASO,EAAiC,CAAE,MAAAC,CAAM,EAAwC,CAC/F,OAAOpB,EAAAD,EAAA,CAAG,SAAAqB,EAAM,MAAQ,EAAE,CAC5B",
  "names": ["Fragment", "jsx", "Icon", "useContext", "ColumnContext", "defaultLocale", "getColumnValue", "context", "item", "obj", "property", "AutoGridNumberRenderer", "value", "formatted", "AutoGridBooleanRenderer", "tryFormatDateTime", "options", "AutoGridDateRenderer", "AutoGridTimeRenderer", "AutoGridDateTimeRenderer", "AutoGridRowNumberRenderer", "model"]
}
