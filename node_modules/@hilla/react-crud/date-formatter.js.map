{
  "version": 3,
  "sources": ["src/date-formatter.ts"],
  "sourcesContent": ["function getFormatRegex(format: Intl.DateTimeFormat) {\n  const sampleDate = new Date(1234, 5 - 1, 6);\n  const formattedSample = format.format(sampleDate);\n  const pattern = formattedSample\n    .replace('1234', '(?<year>\\\\d+)')\n    .replace('05', '(?<month>\\\\d+)')\n    .replace('5', '(?<month>\\\\d+)')\n    .replace('06', '(?<day>\\\\d+)')\n    .replace('6', '(?<day>\\\\d+)');\n\n  return new RegExp(pattern, 'u');\n}\n\nexport interface DateObject {\n  year: number;\n  month: number;\n  day: number;\n}\n\nexport class DateFormatter {\n  private readonly _format: Intl.DateTimeFormat;\n  private readonly _formatRegex: RegExp;\n\n  constructor(locale?: string) {\n    this._format = new Intl.DateTimeFormat(locale);\n    this._formatRegex = getFormatRegex(this._format);\n  }\n\n  format(date: DateObject): string {\n    const dateInstance = new Date();\n    dateInstance.setFullYear(date.year);\n    dateInstance.setMonth(date.month);\n    dateInstance.setDate(date.day);\n    return this._format.format(dateInstance);\n  }\n\n  parse(dateString: string): DateObject | null {\n    const match = this._formatRegex.exec(dateString);\n    const year = Number(match?.groups?.year);\n    const month = Number(match?.groups?.month) - 1;\n    const day = Number(match?.groups?.day);\n\n    // Verify that the parsed date is valid\n    const dateInstance = new Date();\n    dateInstance.setFullYear(year);\n    dateInstance.setMonth(month);\n    dateInstance.setDate(day);\n    if (dateInstance.getFullYear() !== year || dateInstance.getMonth() !== month || dateInstance.getDate() !== day) {\n      return null;\n    }\n\n    return { year, month, day };\n  }\n}\n"],
  "mappings": "AAAA,SAASA,EAAeC,EAA6B,CACnD,MAAMC,EAAa,IAAI,KAAK,KAAM,EAAO,CAAC,EAEpCC,EADkBF,EAAO,OAAOC,CAAU,EAE7C,QAAQ,OAAQ,eAAe,EAC/B,QAAQ,KAAM,gBAAgB,EAC9B,QAAQ,IAAK,gBAAgB,EAC7B,QAAQ,KAAM,cAAc,EAC5B,QAAQ,IAAK,cAAc,EAE9B,OAAO,IAAI,OAAOC,EAAS,GAAG,CAChC,CAQO,MAAMC,CAAc,CACR,QACA,aAEjB,YAAYC,EAAiB,CAC3B,KAAK,QAAU,IAAI,KAAK,eAAeA,CAAM,EAC7C,KAAK,aAAeL,EAAe,KAAK,OAAO,CACjD,CAEA,OAAOM,EAA0B,CAC/B,MAAMC,EAAe,IAAI,KACzB,OAAAA,EAAa,YAAYD,EAAK,IAAI,EAClCC,EAAa,SAASD,EAAK,KAAK,EAChCC,EAAa,QAAQD,EAAK,GAAG,EACtB,KAAK,QAAQ,OAAOC,CAAY,CACzC,CAEA,MAAMC,EAAuC,CAC3C,MAAMC,EAAQ,KAAK,aAAa,KAAKD,CAAU,EACzCE,EAAO,OAAOD,GAAO,QAAQ,IAAI,EACjCE,EAAQ,OAAOF,GAAO,QAAQ,KAAK,EAAI,EACvCG,EAAM,OAAOH,GAAO,QAAQ,GAAG,EAG/BF,EAAe,IAAI,KAIzB,OAHAA,EAAa,YAAYG,CAAI,EAC7BH,EAAa,SAASI,CAAK,EAC3BJ,EAAa,QAAQK,CAAG,EACpBL,EAAa,YAAY,IAAMG,GAAQH,EAAa,SAAS,IAAMI,GAASJ,EAAa,QAAQ,IAAMK,EAClG,KAGF,CAAE,KAAAF,EAAM,MAAAC,EAAO,IAAAC,CAAI,CAC5B,CACF",
  "names": ["getFormatRegex", "format", "sampleDate", "pattern", "DateFormatter", "locale", "date", "dateInstance", "dateString", "match", "year", "month", "day"]
}
