{
  "version": 3,
  "sources": ["src/useAuth.tsx"],
  "sourcesContent": ["import { login as _login, type LoginResult, logout as _logout } from '@hilla/frontend';\nimport { createContext, type Dispatch, useContext, useEffect, useReducer } from 'react';\n\ntype LoginFunction = (username: string, password: string) => Promise<LoginResult>;\ntype LogoutFunction = () => Promise<void>;\n\nconst LOGIN_FETCH = 'LOGIN_FETCH';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\nconst LOGOUT = 'LOGOUT';\n\n/**\n * The type of the function that is used to get the authenticated user.\n */\nexport type GetUserFn<TUser> = () => Promise<TUser | undefined>;\n\ntype AuthState<TUser> = Readonly<{\n  initializing: boolean;\n  loading: boolean;\n  user?: TUser;\n  error?: string;\n  getAuthenticatedUser?: GetUserFn<TUser>;\n}>;\n\ntype LoginFetchAction = Readonly<{\n  type: typeof LOGIN_FETCH;\n}>;\n\ntype LoginSuccessAction = Readonly<{\n  user: unknown;\n  type: typeof LOGIN_SUCCESS;\n}>;\n\ntype LoginFailureAction = Readonly<{\n  error: string;\n  type: typeof LOGIN_FAILURE;\n}>;\n\ntype LoginActions = LoginFailureAction | LoginFetchAction | LoginSuccessAction;\n\ntype LogoutAction = Readonly<{\n  type: typeof LOGOUT;\n}>;\n\nfunction createAuthenticateThunk<TUser>(dispatch: Dispatch<LoginActions>, getAuthenticatedUser: GetUserFn<TUser>) {\n  async function authenticate() {\n    dispatch({ type: LOGIN_FETCH });\n\n    // Get user info from endpoint\n    const user = await getAuthenticatedUser();\n    if (user) {\n      dispatch({\n        user,\n        type: LOGIN_SUCCESS,\n      });\n    } else {\n      dispatch({\n        error: 'Not authenticated',\n        type: LOGIN_FAILURE,\n      });\n    }\n  }\n\n  return authenticate;\n}\n\nfunction createUnauthenticateThunk(dispatch: Dispatch<LogoutAction>) {\n  return () => {\n    dispatch({ type: LOGOUT });\n  };\n}\n\nconst initialState: AuthState<unknown> = {\n  initializing: true,\n  loading: false,\n};\n\nfunction reducer(state: AuthState<unknown>, action: LoginActions | LogoutAction) {\n  switch (action.type) {\n    case LOGIN_FETCH:\n      return {\n        initializing: false,\n        loading: true,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        initializing: false,\n        loading: false,\n        user: action.user,\n      };\n    case LOGIN_FAILURE:\n      return {\n        initializing: false,\n        loading: false,\n        error: action.error,\n      };\n    case LOGOUT:\n      return { initializing: false, loading: false };\n    default:\n      return state;\n  }\n}\n\n/**\n * The properties that can be used to control access to a route.\n * They can be added to the route type handler as properties.\n */\nexport type AccessProps = Readonly<{\n  requiresLogin?: boolean;\n  rolesAllowed?: readonly string[];\n}>;\n\n/**\n * The type of the authentication hook.\n */\nexport type Authentication<TUser> = Readonly<{\n  state: AuthState<TUser>;\n  login: LoginFunction;\n  logout: LogoutFunction;\n  hasAccess(accessProps: AccessProps): boolean;\n}>;\n\n/**\n * The hook that can be used to get the authentication state.\n * It returns the state of the authentication.\n */\nexport const AuthContext = createContext<Authentication<unknown>>({\n  state: initialState,\n  login() {\n    throw new Error('AuthContext not initialized');\n  },\n  logout() {\n    throw new Error('AuthContext not initialized');\n  },\n  hasAccess(): boolean {\n    throw new Error('AuthContext not initialized');\n  },\n});\n\ninterface AuthConfig<TUser> {\n  getRoles?(user: TUser): readonly string[];\n}\n\ninterface AuthProviderProps<TUser> extends React.PropsWithChildren {\n  getAuthenticatedUser: GetUserFn<TUser>;\n  config?: AuthConfig<TUser>;\n}\n\ninterface UserWithRoles {\n  roles?: any;\n}\n\nconst getDefaultRoles = (user: unknown) => {\n  const userWithRoles = user as UserWithRoles;\n  return Array.isArray(userWithRoles.roles) ? userWithRoles.roles : [];\n};\n\nfunction AuthProvider<TUser>({ children, getAuthenticatedUser, config }: AuthProviderProps<TUser>) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const authenticate = createAuthenticateThunk(dispatch, getAuthenticatedUser);\n  const unauthenticate = createUnauthenticateThunk(dispatch);\n\n  async function login(username: string, password: string): Promise<LoginResult> {\n    const result = await _login(username, password);\n\n    if (!result.error) {\n      await authenticate();\n    }\n\n    return result;\n  }\n\n  async function logout(): Promise<void> {\n    await _logout();\n    unauthenticate();\n  }\n\n  function hasAccess(accessProps: AccessProps): boolean {\n    const requiresAuth = accessProps.requiresLogin ?? accessProps.rolesAllowed;\n    if (!requiresAuth) {\n      return true;\n    }\n\n    if (!state.user) {\n      return false;\n    }\n\n    if (accessProps.rolesAllowed) {\n      const userRoles = config?.getRoles ? config.getRoles(state.user as TUser) : getDefaultRoles(state.user);\n      return accessProps.rolesAllowed.some((allowedRole) => userRoles.includes(allowedRole));\n    }\n\n    return true;\n  }\n\n  useEffect(() => {\n    authenticate().catch(() => {\n      // Do nothing\n    });\n  }, []);\n\n  const auth = {\n    state,\n    login,\n    logout,\n    hasAccess,\n  };\n\n  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n}\n\nexport type AuthHook<TUser> = () => Authentication<TUser>;\n\n/**\n * The hook that can be used to authenticate the user.\n * It returns the state of the authentication and the functions\n * to authenticate and unauthenticate the user.\n */\nfunction useAuth<TUser>(): Authentication<TUser> {\n  return useContext(AuthContext) as Authentication<TUser>;\n}\n\ninterface AuthModule<TUser> {\n  AuthProvider: React.FC<React.PropsWithChildren>;\n  useAuth: AuthHook<TUser>;\n}\n\nexport function configureAuth<TUser>(\n  getAuthenticatedUser: GetUserFn<TUser>,\n  config?: AuthConfig<TUser>,\n): AuthModule<TUser> {\n  function PreconfiguredAuthProvider({ children }: React.PropsWithChildren) {\n    return (\n      <AuthProvider<TUser> getAuthenticatedUser={getAuthenticatedUser} config={config}>\n        {children}\n      </AuthProvider>\n    );\n  }\n\n  return {\n    AuthProvider: PreconfiguredAuthProvider,\n    useAuth: useAuth as AuthHook<TUser>,\n  };\n}\n"],
  "mappings": "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",
  "names": ["jsx", "_login", "_logout", "createContext", "useContext", "useEffect", "useReducer", "LOGIN_FETCH", "LOGIN_SUCCESS", "LOGIN_FAILURE", "LOGOUT", "createAuthenticateThunk", "dispatch", "getAuthenticatedUser", "authenticate", "user", "createUnauthenticateThunk", "initialState", "reducer", "state", "action", "AuthContext", "getDefaultRoles", "userWithRoles", "AuthProvider", "children", "config", "unauthenticate", "login", "username", "password", "result", "logout", "hasAccess", "accessProps", "userRoles", "allowedRole", "auth", "useAuth", "configureAuth", "PreconfiguredAuthProvider"]
}
