import { type IndexRouteObject, type NonIndexRouteObject } from 'react-router-dom';
import { type AccessProps } from './useAuth.js';
type CustomMetadata = Record<string, any>;
type HandleWithAuth = Readonly<{
    handle?: AccessProps & CustomMetadata;
}>;
type Override<T, E> = E & Omit<T, keyof E>;
type IndexRouteObjectWithAuth = Override<IndexRouteObject, HandleWithAuth>;
type NonIndexRouteObjectWithAuth = Override<Override<NonIndexRouteObject, HandleWithAuth>, {
    children?: RouteObjectWithAuth[];
}>;
export type RouteObjectWithAuth = IndexRouteObjectWithAuth | NonIndexRouteObjectWithAuth;
/**
 * Adds protection to routes that require authentication.
 * These routes should contain the {@link AccessProps.requiresLogin} and/or
 * {@link AccessProps.rolesAllowed} properties.
 *
 * @param routes - the routes to check if any of them needs to be protected
 * @param redirectPath - the path to redirect to if the route is
 * protected and the user is not authenticated.
 * @returns the routes extended with protection if needed
 */
export declare const protectRoutes: (routes: RouteObjectWithAuth[], redirectPath?: string) => RouteObjectWithAuth[];
export {};
//# sourceMappingURL=ProtectedRoute.d.ts.map