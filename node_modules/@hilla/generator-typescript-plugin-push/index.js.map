{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["import Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport type SharedStorage from '@hilla/generator-typescript-core/SharedStorage.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyObjectDeep } from 'type-fest/source/readonly-deep';\nimport { type EndpointOperations, PushProcessor } from './PushProcessor.js';\n\ntype ExtendedMediaTypeSchema = Readonly<{ 'x-class-name': string }> &\n  ReadonlyObjectDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject>;\n\nconst classesToReplace: readonly string[] = [\n  'dev.hilla.runtime.transfertypes.Flux',\n  'dev.hilla.runtime.transfertypes.EndpointSubscription',\n];\n\nexport default class PushPlugin extends Plugin {\n  /**\n   * Collects methods that must be patched by checking their `x-class-name` value\n   */\n  static #collectPatchableMethods(paths: ReadonlyObjectDeep<OpenAPIV3.PathsObject>) {\n    return Object.entries(paths).reduce((acc, [key, path]) => {\n      const response = path?.post?.responses[200] as ReadonlyObjectDeep<OpenAPIV3.ResponseObject> | undefined;\n      const schema = response?.content?.['application/json']?.schema as ExtendedMediaTypeSchema | undefined;\n      const className = schema?.['x-class-name'];\n      const [, endpoint, method] = key.split('/');\n\n      if (className && classesToReplace.includes(className)) {\n        if (acc.has(endpoint)) {\n          acc.get(endpoint)!.methodsToPatch.push(method);\n        } else {\n          acc.set(endpoint, { methodsToPatch: [method], removeInitImport: true });\n        }\n      } else {\n        // Not all methods will be patched, let's keep the init import\n        // eslint-disable-next-line no-lonely-if\n        if (acc.has(endpoint)) {\n          acc.get(endpoint)!.removeInitImport = false;\n        } else {\n          acc.set(endpoint, { methodsToPatch: [], removeInitImport: false });\n        }\n      }\n\n      return acc;\n    }, new Map<string, EndpointOperations>());\n  }\n\n  declare ['constructor']: typeof PushPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async execute(storage: SharedStorage): Promise<void> {\n    const { api, sources } = storage;\n    const endpointMethodMap = this.constructor.#collectPatchableMethods(api.paths);\n\n    for (let i = 0; i < sources.length; i++) {\n      const { fileName } = sources[i];\n      const endpoint = fileName.substring(0, fileName.indexOf('.ts'));\n\n      if (endpointMethodMap.has(endpoint)) {\n        sources[i] = new PushProcessor(sources[i], endpointMethodMap.get(endpoint)!).process();\n      }\n    }\n  }\n}\n"],
  "mappings": "AAAA,OAAOA,MAAY,6CAInB,OAAkC,iBAAAC,MAAqB,qBAKvD,MAAMC,EAAsC,CAC1C,uCACA,sDACF,EAEA,MAAOC,UAAiCH,CAAO,CAI7C,MAAOI,GAAyBC,EAAkD,CAChF,OAAO,OAAO,QAAQA,CAAK,EAAE,OAAO,CAACC,EAAK,CAACC,EAAKC,CAAI,IAAM,CAGxD,MAAMC,EAFWD,GAAM,MAAM,UAAU,GAAG,GACjB,UAAU,kBAAkB,GAAG,SAC7B,cAAc,EACnC,CAAC,CAAEE,EAAUC,CAAM,EAAIJ,EAAI,MAAM,GAAG,EAE1C,OAAIE,GAAaP,EAAiB,SAASO,CAAS,EAC9CH,EAAI,IAAII,CAAQ,EAClBJ,EAAI,IAAII,CAAQ,EAAG,eAAe,KAAKC,CAAM,EAE7CL,EAAI,IAAII,EAAU,CAAE,eAAgB,CAACC,CAAM,EAAG,iBAAkB,EAAK,CAAC,EAKpEL,EAAI,IAAII,CAAQ,EAClBJ,EAAI,IAAII,CAAQ,EAAG,iBAAmB,GAEtCJ,EAAI,IAAII,EAAU,CAAE,eAAgB,CAAC,EAAG,iBAAkB,EAAM,CAAC,EAI9DJ,CACT,EAAG,IAAI,GAAiC,CAC1C,CAIA,IAAa,MAAe,CAC1B,OAAO,YAAY,GACrB,CAGA,MAAe,QAAQM,EAAuC,CAC5D,KAAM,CAAE,IAAAC,EAAK,QAAAC,CAAQ,EAAIF,EACnBG,EAAoB,KAAK,YAAYX,GAAyBS,EAAI,KAAK,EAE7E,QAASG,EAAI,EAAGA,EAAIF,EAAQ,OAAQE,IAAK,CACvC,KAAM,CAAE,SAAAC,CAAS,EAAIH,EAAQE,CAAC,EACxBN,EAAWO,EAAS,UAAU,EAAGA,EAAS,QAAQ,KAAK,CAAC,EAE1DF,EAAkB,IAAIL,CAAQ,IAChCI,EAAQE,CAAC,EAAI,IAAIf,EAAca,EAAQE,CAAC,EAAGD,EAAkB,IAAIL,CAAQ,CAAE,EAAE,QAAQ,EAEzF,CACF,CACF",
  "names": ["Plugin", "PushProcessor", "classesToReplace", "PushPlugin", "#collectPatchableMethods", "paths", "acc", "key", "path", "className", "endpoint", "method", "storage", "api", "sources", "endpointMethodMap", "i", "fileName"]
}
